
Release.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005354  08005354  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800535c  0800535c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005364  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000288  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000294  20000294  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6c5  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002170  00000000  00000000  00016701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00018878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b14  00000000  00000000  00019688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226b9  00000000  00000000  0001a19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f7a  00000000  00000000  0003c855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8226  00000000  00000000  0004d7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001259f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bc0  00000000  00000000  00125a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001295f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005324 	.word	0x08005324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005324 	.word	0x08005324

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // 0.595 мкс
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
    if (Target.Rx_data[19] != '\0')
 80004c0:	4b3e      	ldr	r3, [pc, #248]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 80004c2:	7cdb      	ldrb	r3, [r3, #19]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d008      	beq.n	80004da <HAL_UART_RxCpltCallback+0x22>
    {
        HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 80004c8:	4b3d      	ldr	r3, [pc, #244]	@ (80005c0 <HAL_UART_RxCpltCallback+0x108>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	493a      	ldr	r1, [pc, #232]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 80004d2:	483c      	ldr	r0, [pc, #240]	@ (80005c4 <HAL_UART_RxCpltCallback+0x10c>)
 80004d4:	f003 ff69 	bl	80043aa <HAL_UART_Receive_IT>
        return;
 80004d8:	e06d      	b.n	80005b6 <HAL_UART_RxCpltCallback+0xfe>
    };

    Motor_AZ.Status.Angular =
        (Target.Rx_data[3] - '0') * 100 +  // сотни
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 80004dc:	78db      	ldrb	r3, [r3, #3]
 80004de:	3b30      	subs	r3, #48	@ 0x30
 80004e0:	2264      	movs	r2, #100	@ 0x64
 80004e2:	fb02 f103 	mul.w	r1, r2, r3
        (Target.Rx_data[4] - '0') * 10 +   // десятки
 80004e6:	4b35      	ldr	r3, [pc, #212]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80004ee:	4613      	mov	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4413      	add	r3, r2
 80004f4:	005b      	lsls	r3, r3, #1
        (Target.Rx_data[3] - '0') * 100 +  // сотни
 80004f6:	18ca      	adds	r2, r1, r3
        (Target.Rx_data[5] - '0') +        // единицы
 80004f8:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	3b30      	subs	r3, #48	@ 0x30
        (Target.Rx_data[4] - '0') * 10 +   // десятки
 80004fe:	4413      	add	r3, r2
        (Target.Rx_data[5] - '0') +        // единицы
 8000500:	ee07 3a90 	vmov	s15, r3
 8000504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        (Target.Rx_data[6] - '0') * 0.1f;  // десятые
 8000508:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 800050a:	799b      	ldrb	r3, [r3, #6]
 800050c:	3b30      	subs	r3, #48	@ 0x30
 800050e:	ee07 3a90 	vmov	s15, r3
 8000512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000516:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80005c8 <HAL_UART_RxCpltCallback+0x110>
 800051a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        (Target.Rx_data[5] - '0') +        // единицы
 800051e:	ee77 7a27 	vadd.f32	s15, s14, s15
    Motor_AZ.Status.Angular =
 8000522:	4b2a      	ldr	r3, [pc, #168]	@ (80005cc <HAL_UART_RxCpltCallback+0x114>)
 8000524:	edc3 7a05 	vstr	s15, [r3, #20]
    if (Target.Rx_data[2] == '-') Motor_AZ.Status.Angular *= -1;
 8000528:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 800052a:	789b      	ldrb	r3, [r3, #2]
 800052c:	2b2d      	cmp	r3, #45	@ 0x2d
 800052e:	d107      	bne.n	8000540 <HAL_UART_RxCpltCallback+0x88>
 8000530:	4b26      	ldr	r3, [pc, #152]	@ (80005cc <HAL_UART_RxCpltCallback+0x114>)
 8000532:	edd3 7a05 	vldr	s15, [r3, #20]
 8000536:	eef1 7a67 	vneg.f32	s15, s15
 800053a:	4b24      	ldr	r3, [pc, #144]	@ (80005cc <HAL_UART_RxCpltCallback+0x114>)
 800053c:	edc3 7a05 	vstr	s15, [r3, #20]

    Motor_EL.Status.Angular =
        (Target.Rx_data[10] - '0') * 100 +
 8000540:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 8000542:	7a9b      	ldrb	r3, [r3, #10]
 8000544:	3b30      	subs	r3, #48	@ 0x30
 8000546:	2264      	movs	r2, #100	@ 0x64
 8000548:	fb02 f103 	mul.w	r1, r2, r3
        (Target.Rx_data[11] - '0') * 10 +
 800054c:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 800054e:	7adb      	ldrb	r3, [r3, #11]
 8000550:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
        (Target.Rx_data[10] - '0') * 100 +
 800055c:	18ca      	adds	r2, r1, r3
        (Target.Rx_data[12] - '0') +
 800055e:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 8000560:	7b1b      	ldrb	r3, [r3, #12]
 8000562:	3b30      	subs	r3, #48	@ 0x30
        (Target.Rx_data[11] - '0') * 10 +
 8000564:	4413      	add	r3, r2
        (Target.Rx_data[12] - '0') +
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        (Target.Rx_data[14] - '0') * 0.1f;
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 8000570:	7b9b      	ldrb	r3, [r3, #14]
 8000572:	3b30      	subs	r3, #48	@ 0x30
 8000574:	ee07 3a90 	vmov	s15, r3
 8000578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800057c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80005c8 <HAL_UART_RxCpltCallback+0x110>
 8000580:	ee67 7aa6 	vmul.f32	s15, s15, s13
        (Target.Rx_data[12] - '0') +
 8000584:	ee77 7a27 	vadd.f32	s15, s14, s15
    Motor_EL.Status.Angular =
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <HAL_UART_RxCpltCallback+0x118>)
 800058a:	edc3 7a05 	vstr	s15, [r3, #20]
    if (Target.Rx_data[9] == '-') Motor_EL.Status.Angular *= -1;
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 8000590:	7a5b      	ldrb	r3, [r3, #9]
 8000592:	2b2d      	cmp	r3, #45	@ 0x2d
 8000594:	d107      	bne.n	80005a6 <HAL_UART_RxCpltCallback+0xee>
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_UART_RxCpltCallback+0x118>)
 8000598:	edd3 7a05 	vldr	s15, [r3, #20]
 800059c:	eef1 7a67 	vneg.f32	s15, s15
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_UART_RxCpltCallback+0x118>)
 80005a2:	edc3 7a05 	vstr	s15, [r3, #20]

    HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_UART_RxCpltCallback+0x108>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	4903      	ldr	r1, [pc, #12]	@ (80005bc <HAL_UART_RxCpltCallback+0x104>)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <HAL_UART_RxCpltCallback+0x10c>)
 80005b2:	f003 fefa 	bl	80043aa <HAL_UART_Receive_IT>
}
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000258 	.word	0x20000258
 80005c0:	20000288 	.word	0x20000288
 80005c4:	20000148 	.word	0x20000148
 80005c8:	3dcccccd 	.word	0x3dcccccd
 80005cc:	20000190 	.word	0x20000190
 80005d0:	200001f4 	.word	0x200001f4

080005d4 <Read_AD_Conversion>:
//
//	HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, data_size);
//};

void Read_AD_Conversion(Motor *Motor_xx) // 2.02 мкс
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b092      	sub	sp, #72	@ 0x48
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef* hadc = Motor_xx->Config.Convertor.Convertor;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005e0:	643b      	str	r3, [r7, #64]	@ 0x40
	Status* status = &Motor_xx->Status;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const Config* config = &Motor_xx->Config;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	331c      	adds	r3, #28
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	const float alfa = config->Alfa;
 80005ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
	const float one_minus_alfa = 1.0f - alfa;
 80005f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80005fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005fe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	HAL_ADC_Start(hadc);
 8000602:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000604:	f001 fa98 	bl	8001b38 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(hadc, 100) != HAL_OK)
 8000608:	2164      	movs	r1, #100	@ 0x64
 800060a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800060c:	f001 fb99 	bl	8001d42 <HAL_ADC_PollForConversion>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <Read_AD_Conversion+0x4a>
	{
		HAL_ADC_Stop(hadc);
 8000616:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000618:	f001 fb60 	bl	8001cdc <HAL_ADC_Stop>
		return;
 800061c:	e088      	b.n	8000730 <Read_AD_Conversion+0x15c>
	};

	const uint32_t raw_value = HAL_ADC_GetValue(hadc);
 800061e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000620:	f001 fd2a 	bl	8002078 <HAL_ADC_GetValue>
 8000624:	62f8      	str	r0, [r7, #44]	@ 0x2c
	HAL_ADC_Stop(hadc);
 8000626:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000628:	f001 fb58 	bl	8001cdc <HAL_ADC_Stop>

	const int32_t min_discrete = config->Convertor.Minimum_discrete_level;
 800062c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800062e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
	const int32_t max_discrete = config->Convertor.Maximum_discrete_level;
 8000632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
	const float min_angular = config->Angular.Minimum_angular;
 8000638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800063a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800063c:	623b      	str	r3, [r7, #32]
	const float max_angular = config->Angular.Maximum_angular;
 800063e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	61fb      	str	r3, [r7, #28]

	const float filtered_discrete = alfa * (float)raw_value + one_minus_alfa * status->filtered_Discrete_level;
 8000644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000646:	ee07 3a90 	vmov	s15, r3
 800064a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800064e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000658:	edd3 6a04 	vldr	s13, [r3, #16]
 800065c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000668:	edc7 7a06 	vstr	s15, [r7, #24]
	status->filtered_Discrete_level = filtered_discrete;
 800066c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	611a      	str	r2, [r3, #16]
	status->Discrete_level = filtered_discrete;
 8000672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000674:	69ba      	ldr	r2, [r7, #24]
 8000676:	60da      	str	r2, [r3, #12]

	float norma = 0.0f;
 8000678:	f04f 0300 	mov.w	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	@ 0x44
	const int32_t discrete_range = max_discrete - min_discrete;
 800067e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	617b      	str	r3, [r7, #20]

	if (discrete_range > 0)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dd2a      	ble.n	80006e2 <Read_AD_Conversion+0x10e>
	{
		norma = (float)((int32_t)filtered_discrete - min_discrete) * config->Convertor.Inv_discrete_range;
 800068c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000694:	ee17 2a90 	vmov	r2, s15
 8000698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006a6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80006aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ae:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		norma = (norma < 0.0f) ? 0.0f : (norma > 1.0f) ? 1.0f : norma;
 80006b2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80006b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006be:	d502      	bpl.n	80006c6 <Read_AD_Conversion+0xf2>
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e00c      	b.n	80006e0 <Read_AD_Conversion+0x10c>
 80006c6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80006ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d6:	dd02      	ble.n	80006de <Read_AD_Conversion+0x10a>
 80006d8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006dc:	e000      	b.n	80006e0 <Read_AD_Conversion+0x10c>
 80006de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	const float angular = min_angular + norma * (max_angular - min_angular);
 80006e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80006e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80006ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006ee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80006f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	edc7 7a04 	vstr	s15, [r7, #16]
	const float filtered_angular = alfa * angular + one_minus_alfa * status->filter_Angular;
 8000702:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000706:	edd7 7a04 	vldr	s15, [r7, #16]
 800070a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800070e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000710:	edd3 6a06 	vldr	s13, [r3, #24]
 8000714:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800071c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000720:	edc7 7a03 	vstr	s15, [r7, #12]

	status->filter_Angular = filtered_angular;
 8000724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	619a      	str	r2, [r3, #24]
	status->Angular = filtered_angular;
 800072a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	615a      	str	r2, [r3, #20]
};
 8000730:	3748      	adds	r7, #72	@ 0x48
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <Transmet_computer>:
//};



void Transmet_computer(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
	uint32_t TimeOut = 100;
 800073e:	2364      	movs	r3, #100	@ 0x64
 8000740:	617b      	str	r3, [r7, #20]

	float az_angle = Motor_AZ.Status.Angular;
 8000742:	4b80      	ldr	r3, [pc, #512]	@ (8000944 <Transmet_computer+0x20c>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	613b      	str	r3, [r7, #16]
	float el_angle = Motor_EL.Status.Angular;
 8000748:	4b7f      	ldr	r3, [pc, #508]	@ (8000948 <Transmet_computer+0x210>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	60fb      	str	r3, [r7, #12]

	uint16_t angular_az = (uint16_t)((az_angle < 0 ? -az_angle : az_angle) * 10.0f);
 800074e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d504      	bpl.n	8000766 <Transmet_computer+0x2e>
 800075c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000760:	eef1 7a67 	vneg.f32	s15, s15
 8000764:	e001      	b.n	800076a <Transmet_computer+0x32>
 8000766:	edd7 7a04 	vldr	s15, [r7, #16]
 800076a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800076e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000776:	ee17 3a90 	vmov	r3, s15
 800077a:	817b      	strh	r3, [r7, #10]
	uint16_t angular_el = (uint16_t)((el_angle < 0 ? -el_angle : el_angle) * 10.0f);
 800077c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	d504      	bpl.n	8000794 <Transmet_computer+0x5c>
 800078a:	edd7 7a03 	vldr	s15, [r7, #12]
 800078e:	eef1 7a67 	vneg.f32	s15, s15
 8000792:	e001      	b.n	8000798 <Transmet_computer+0x60>
 8000794:	edd7 7a03 	vldr	s15, [r7, #12]
 8000798:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800079c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a4:	ee17 3a90 	vmov	r3, s15
 80007a8:	813b      	strh	r3, [r7, #8]

	Target.Tx_data[1] = (az_angle >= 0) ? '1' : '0';
 80007aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80007ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b6:	db01      	blt.n	80007bc <Transmet_computer+0x84>
 80007b8:	2231      	movs	r2, #49	@ 0x31
 80007ba:	e000      	b.n	80007be <Transmet_computer+0x86>
 80007bc:	2230      	movs	r2, #48	@ 0x30
 80007be:	4b63      	ldr	r3, [pc, #396]	@ (800094c <Transmet_computer+0x214>)
 80007c0:	755a      	strb	r2, [r3, #21]
	Target.Tx_data[6] = (el_angle >= 0) ? '1' : '0';
 80007c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	db01      	blt.n	80007d4 <Transmet_computer+0x9c>
 80007d0:	2231      	movs	r2, #49	@ 0x31
 80007d2:	e000      	b.n	80007d6 <Transmet_computer+0x9e>
 80007d4:	2230      	movs	r2, #48	@ 0x30
 80007d6:	4b5d      	ldr	r3, [pc, #372]	@ (800094c <Transmet_computer+0x214>)
 80007d8:	769a      	strb	r2, [r3, #26]

	uint16_t num = angular_az;
 80007da:	897b      	ldrh	r3, [r7, #10]
 80007dc:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[5] = '0' + num % 10; num /= 10;
 80007de:	88fa      	ldrh	r2, [r7, #6]
 80007e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000950 <Transmet_computer+0x218>)
 80007e2:	fba3 1302 	umull	r1, r3, r3, r2
 80007e6:	08d9      	lsrs	r1, r3, #3
 80007e8:	460b      	mov	r3, r1
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3330      	adds	r3, #48	@ 0x30
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b54      	ldr	r3, [pc, #336]	@ (800094c <Transmet_computer+0x214>)
 80007fc:	765a      	strb	r2, [r3, #25]
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	4a53      	ldr	r2, [pc, #332]	@ (8000950 <Transmet_computer+0x218>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[4] = '0' + num % 10; num /= 10;
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	4b50      	ldr	r3, [pc, #320]	@ (8000950 <Transmet_computer+0x218>)
 800080e:	fba3 1302 	umull	r1, r3, r3, r2
 8000812:	08d9      	lsrs	r1, r3, #3
 8000814:	460b      	mov	r3, r1
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	440b      	add	r3, r1
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3330      	adds	r3, #48	@ 0x30
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b49      	ldr	r3, [pc, #292]	@ (800094c <Transmet_computer+0x214>)
 8000828:	761a      	strb	r2, [r3, #24]
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	4a48      	ldr	r2, [pc, #288]	@ (8000950 <Transmet_computer+0x218>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[3] = '0' + num % 10; num /= 10;
 8000836:	88fa      	ldrh	r2, [r7, #6]
 8000838:	4b45      	ldr	r3, [pc, #276]	@ (8000950 <Transmet_computer+0x218>)
 800083a:	fba3 1302 	umull	r1, r3, r3, r2
 800083e:	08d9      	lsrs	r1, r3, #3
 8000840:	460b      	mov	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	b29b      	uxth	r3, r3
 800084c:	b2db      	uxtb	r3, r3
 800084e:	3330      	adds	r3, #48	@ 0x30
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b3e      	ldr	r3, [pc, #248]	@ (800094c <Transmet_computer+0x214>)
 8000854:	75da      	strb	r2, [r3, #23]
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	4a3d      	ldr	r2, [pc, #244]	@ (8000950 <Transmet_computer+0x218>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[2] = '0' + num % 10;
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	4b3a      	ldr	r3, [pc, #232]	@ (8000950 <Transmet_computer+0x218>)
 8000866:	fba3 1302 	umull	r1, r3, r3, r2
 800086a:	08d9      	lsrs	r1, r3, #3
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	3330      	adds	r3, #48	@ 0x30
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <Transmet_computer+0x214>)
 8000880:	759a      	strb	r2, [r3, #22]

	// Оптимизированное преобразование цифр для угла места
	num = angular_el;
 8000882:	893b      	ldrh	r3, [r7, #8]
 8000884:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[10] = '0' + num % 10; num /= 10;
 8000886:	88fa      	ldrh	r2, [r7, #6]
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <Transmet_computer+0x218>)
 800088a:	fba3 1302 	umull	r1, r3, r3, r2
 800088e:	08d9      	lsrs	r1, r3, #3
 8000890:	460b      	mov	r3, r1
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3330      	adds	r3, #48	@ 0x30
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <Transmet_computer+0x214>)
 80008a4:	779a      	strb	r2, [r3, #30]
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <Transmet_computer+0x218>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[9] = '0' + num % 10; num /= 10;
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <Transmet_computer+0x218>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	08d9      	lsrs	r1, r3, #3
 80008bc:	460b      	mov	r3, r1
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	3330      	adds	r3, #48	@ 0x30
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <Transmet_computer+0x214>)
 80008d0:	775a      	strb	r2, [r3, #29]
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <Transmet_computer+0x218>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	08db      	lsrs	r3, r3, #3
 80008dc:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[8] = '0' + num % 10; num /= 10;
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <Transmet_computer+0x218>)
 80008e2:	fba3 1302 	umull	r1, r3, r3, r2
 80008e6:	08d9      	lsrs	r1, r3, #3
 80008e8:	460b      	mov	r3, r1
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	3330      	adds	r3, #48	@ 0x30
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <Transmet_computer+0x214>)
 80008fc:	771a      	strb	r2, [r3, #28]
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <Transmet_computer+0x218>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	80fb      	strh	r3, [r7, #6]
	Target.Tx_data[7] = '0' + num % 10;
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <Transmet_computer+0x218>)
 800090e:	fba3 1302 	umull	r1, r3, r3, r2
 8000912:	08d9      	lsrs	r1, r3, #3
 8000914:	460b      	mov	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	440b      	add	r3, r1
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	b29b      	uxth	r3, r3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3330      	adds	r3, #48	@ 0x30
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <Transmet_computer+0x214>)
 8000928:	76da      	strb	r2, [r3, #27]

	HAL_UART_Transmit(&huart2, (uint8_t*)Target.Tx_data, Size_Tx_UART, TimeOut);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <Transmet_computer+0x21c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	b29a      	uxth	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	4909      	ldr	r1, [pc, #36]	@ (8000958 <Transmet_computer+0x220>)
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <Transmet_computer+0x224>)
 8000936:	f003 fcad 	bl	8004294 <HAL_UART_Transmit>
};
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000190 	.word	0x20000190
 8000948:	200001f4 	.word	0x200001f4
 800094c:	20000258 	.word	0x20000258
 8000950:	cccccccd 	.word	0xcccccccd
 8000954:	2000028c 	.word	0x2000028c
 8000958:	2000026c 	.word	0x2000026c
 800095c:	20000148 	.word	0x20000148

08000960 <Set_PWM_Frequency>:

void Set_PWM_Frequency(Motor *Motor_xx, uint32_t freq)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	if(Motor_xx == NULL || Motor_xx->Config.PWM.Timer == NULL)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d04f      	beq.n	8000a10 <Set_PWM_Frequency+0xb0>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000974:	2b00      	cmp	r3, #0
 8000976:	d04b      	beq.n	8000a10 <Set_PWM_Frequency+0xb0>
	{
		return;
	}
	else
	{
		freq = CLAMP(freq, Motor_xx->Config.PWM.Minimum_frequency, Motor_xx->Config.PWM.Maximum_frequency);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	bf28      	it	cs
 8000982:	461a      	movcs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000988:	4293      	cmp	r3, r2
 800098a:	bf38      	it	cc
 800098c:	4613      	movcc	r3, r2
 800098e:	603b      	str	r3, [r7, #0]

		uint32_t prescaler = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
		uint32_t period = (HAL_RCC_GetPCLK1Freq() * 2 / freq) - 1;
 8000994:	f002 fd8e 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8000998:	4603      	mov	r3, r0
 800099a:	005a      	lsls	r2, r3, #1
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	3b01      	subs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]

		while (period > 0xFFFF)
 80009a6:	e00f      	b.n	80009c8 <Set_PWM_Frequency+0x68>
		{
			prescaler++;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
			period = (HAL_RCC_GetPCLK1Freq() * 2 / (freq * (prescaler + 1))) - 1;
 80009ae:	f002 fd81 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80009b2:	4603      	mov	r3, r0
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	3b01      	subs	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
		while (period > 0xFFFF)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009ce:	d2eb      	bcs.n	80009a8 <Set_PWM_Frequency+0x48>
		}

		HAL_TIM_PWM_Stop(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 feac 	bl	8003734 <HAL_TIM_PWM_Stop>
		Motor_xx->Config.PWM.Timer->Instance->PSC = prescaler;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
		Motor_xx->Config.PWM.Timer->Instance->ARR = period;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
		Motor_xx->Config.PWM.Timer->Instance->CCR1 = period / 2;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	0852      	lsrs	r2, r2, #1
 80009fa:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_TIM_PWM_Start(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fdce 	bl	80035a4 <HAL_TIM_PWM_Start>
		Motor_xx->Status.Frequency = freq;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e000      	b.n	8000a12 <Set_PWM_Frequency+0xb2>
		return;
 8000a10:	bf00      	nop
	};
};
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <Start_motor>:

void Start_motor(Target_data *Target, Motor *Motor_xx)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	Motor_xx->Status.Frequency = Motor_xx->Config.PWM.Minimum_frequency;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	601a      	str	r2, [r3, #0]
	Set_PWM_Frequency(Motor_xx, Motor_xx->Status.Frequency);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	6838      	ldr	r0, [r7, #0]
 8000a32:	f7ff ff95 	bl	8000960 <Set_PWM_Frequency>
	HAL_TIM_PWM_Start(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fdb1 	bl	80035a4 <HAL_TIM_PWM_Start>

	GPIO_PinState roter;
	if (Motor_xx->Config.GPIO.DIR_port == Motor_AZ.Config.GPIO.DIR_port && Motor_xx->Config.GPIO.DIR_pin == Motor_AZ.Config.GPIO.DIR_pin)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	69da      	ldr	r2, [r3, #28]
 8000a46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <Start_motor+0xa8>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d112      	bne.n	8000a74 <Start_motor+0x5c>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <Start_motor+0xa8>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d10c      	bne.n	8000a74 <Start_motor+0x5c>
	{
		roter = (Target->Azimuth_difference > 0) ? Left : Right;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	bfcc      	ite	gt
 8000a6a:	2301      	movgt	r3, #1
 8000a6c:	2300      	movle	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e00b      	b.n	8000a8c <Start_motor+0x74>
	}
	else
	{
		roter = (Target->Elevation_difference > 0) ? Up : Down;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a82:	bfcc      	ite	gt
 8000a84:	2301      	movgt	r3, #1
 8000a86:	2300      	movle	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	73fb      	strb	r3, [r7, #15]
	};
	HAL_GPIO_WritePin(Motor_xx->Config.GPIO.DIR_port, Motor_xx->Config.GPIO.DIR_pin, roter);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	69d8      	ldr	r0, [r3, #28]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f002 f881 	bl	8002ba0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Work);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	6a18      	ldr	r0, [r3, #32]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f002 f878 	bl	8002ba0 <HAL_GPIO_WritePin>
	Motor_xx->Status.Moving = 1;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	721a      	strb	r2, [r3, #8]
};
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000190 	.word	0x20000190

08000ac4 <Up_fequency>:

void Up_fequency(Motor *Motor_xx)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - Motor_xx->Status.Last_freq_update_time >= 100)
 8000acc:	f000 ffc0 	bl	8001a50 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b63      	cmp	r3, #99	@ 0x63
 8000ada:	d920      	bls.n	8000b1e <Up_fequency+0x5a>
	{
		if (Motor_xx->Status.Frequency < Motor_xx->Config.PWM.Maximum_frequency)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d21a      	bcs.n	8000b1e <Up_fequency+0x5a>
		{
			Motor_xx->Status.Frequency += Motor_xx->Config.PWM.Increment_frequency;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000af0:	441a      	add	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
			Motor_xx->Status.Frequency = MIN(Motor_xx->Status.Frequency, Motor_xx->Config.PWM.Maximum_frequency);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	bf28      	it	cs
 8000b02:	461a      	movcs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]
			Set_PWM_Frequency(Motor_xx, Motor_xx->Status.Frequency);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff26 	bl	8000960 <Set_PWM_Frequency>
			Motor_xx->Status.Last_freq_update_time = HAL_GetTick();
 8000b14:	f000 ff9c 	bl	8001a50 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	605a      	str	r2, [r3, #4]
		};
	};
};
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <Stop_motor>:

void Stop_motor(Motor *Motor_xx)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fdfd 	bl	8003734 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, 1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a18      	ldr	r0, [r3, #32]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	f002 f82a 	bl	8002ba0 <HAL_GPIO_WritePin>
	Motor_xx->Status.Moving = 0;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	721a      	strb	r2, [r3, #8]
};
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <Moving_away_from_borders>:

void Moving_away_from_borders(Motor *Motor_xx, unsigned int TimeOut)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	Motor_xx->Status.Frequency = Motor_xx->Config.PWM.Minimum_frequency;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
	Set_PWM_Frequency(Motor_xx, Motor_xx->Status.Frequency);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fef3 	bl	8000960 <Set_PWM_Frequency>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4827      	ldr	r0, [pc, #156]	@ (8000c1c <Moving_away_from_borders+0xc0>)
 8000b7e:	f002 fd11 	bl	80035a4 <HAL_TIM_PWM_Start>

	GPIO_PinState roter;
	if (Motor_xx->Config.GPIO.DIR_port == Motor_AZ.Config.GPIO.DIR_port && Motor_xx->Config.GPIO.DIR_pin == Motor_AZ.Config.GPIO.DIR_pin)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69da      	ldr	r2, [r3, #28]
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <Moving_away_from_borders+0xc4>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d115      	bne.n	8000bba <Moving_away_from_borders+0x5e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b92:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <Moving_away_from_borders+0xc4>)
 8000b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d10f      	bne.n	8000bba <Moving_away_from_borders+0x5e>
	{
		roter = (Motor_xx->Status.Angular > 0) ? Right : Left;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba8:	bfcc      	ite	gt
 8000baa:	2301      	movgt	r3, #1
 8000bac:	2300      	movle	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f083 0301 	eor.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e00e      	b.n	8000bd8 <Moving_away_from_borders+0x7c>
	}
	else
	{
		roter = (Motor_xx->Status.Angular > 0) ? Down : Up;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc8:	bfcc      	ite	gt
 8000bca:	2301      	movgt	r3, #1
 8000bcc:	2300      	movle	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
	};
	HAL_GPIO_WritePin(Motor_xx->Config.GPIO.DIR_port, Motor_xx->Config.GPIO.DIR_pin, roter);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69d8      	ldr	r0, [r3, #28]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f001 ffdb 	bl	8002ba0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Work);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a18      	ldr	r0, [r3, #32]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f001 ffd2 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_Delay(TimeOut);
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f000 ff33 	bl	8001a68 <HAL_Delay>

	HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Sleep);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a18      	ldr	r0, [r3, #32]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f001 ffc6 	bl	8002ba0 <HAL_GPIO_WritePin>
};
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000100 	.word	0x20000100
 8000c20:	20000190 	.word	0x20000190

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	ed2d 8b04 	vpush	{d8-d9}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	/* Turret */
		/* Config */
			/* GPIO */
				Motor_AZ.Config.GPIO.DIR_port = GPIOE; Motor_AZ.Config.GPIO.DIR_pin = GPIO_PIN_8;
 8000c2e:	4baa      	ldr	r3, [pc, #680]	@ (8000ed8 <main+0x2b4>)
 8000c30:	4aaa      	ldr	r2, [pc, #680]	@ (8000edc <main+0x2b8>)
 8000c32:	61da      	str	r2, [r3, #28]
 8000c34:	4ba8      	ldr	r3, [pc, #672]	@ (8000ed8 <main+0x2b4>)
 8000c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24
				Motor_EL.Config.GPIO.DIR_port = GPIOE; Motor_EL.Config.GPIO.DIR_pin = GPIO_PIN_9;
 8000c3c:	4ba8      	ldr	r3, [pc, #672]	@ (8000ee0 <main+0x2bc>)
 8000c3e:	4aa7      	ldr	r2, [pc, #668]	@ (8000edc <main+0x2b8>)
 8000c40:	61da      	str	r2, [r3, #28]
 8000c42:	4ba7      	ldr	r3, [pc, #668]	@ (8000ee0 <main+0x2bc>)
 8000c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24

				Motor_AZ.Config.GPIO.ENA_port = GPIOE; Motor_AZ.Config.GPIO.ENA_pin = GPIO_PIN_11;
 8000c4a:	4ba3      	ldr	r3, [pc, #652]	@ (8000ed8 <main+0x2b4>)
 8000c4c:	4aa3      	ldr	r2, [pc, #652]	@ (8000edc <main+0x2b8>)
 8000c4e:	621a      	str	r2, [r3, #32]
 8000c50:	4ba1      	ldr	r3, [pc, #644]	@ (8000ed8 <main+0x2b4>)
 8000c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
				Motor_EL.Config.GPIO.ENA_port = GPIOE; Motor_EL.Config.GPIO.ENA_pin = GPIO_PIN_12;
 8000c58:	4ba1      	ldr	r3, [pc, #644]	@ (8000ee0 <main+0x2bc>)
 8000c5a:	4aa0      	ldr	r2, [pc, #640]	@ (8000edc <main+0x2b8>)
 8000c5c:	621a      	str	r2, [r3, #32]
 8000c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8000ee0 <main+0x2bc>)
 8000c60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28

			/* PWM */
				Motor_AZ.Config.PWM.Timer = &htim3;
 8000c66:	4b9c      	ldr	r3, [pc, #624]	@ (8000ed8 <main+0x2b4>)
 8000c68:	4a9e      	ldr	r2, [pc, #632]	@ (8000ee4 <main+0x2c0>)
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
				Motor_EL.Config.PWM.Timer = &htim2;
 8000c6c:	4b9c      	ldr	r3, [pc, #624]	@ (8000ee0 <main+0x2bc>)
 8000c6e:	4a9e      	ldr	r2, [pc, #632]	@ (8000ee8 <main+0x2c4>)
 8000c70:	62da      	str	r2, [r3, #44]	@ 0x2c

				Motor_AZ.Config.PWM.Maximum_frequency = 200000; Motor_AZ.Config.PWM.Minimum_frequency = 20000; Motor_AZ.Config.PWM.Increment_frequency = 10000;
 8000c72:	4b99      	ldr	r3, [pc, #612]	@ (8000ed8 <main+0x2b4>)
 8000c74:	4a9d      	ldr	r2, [pc, #628]	@ (8000eec <main+0x2c8>)
 8000c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c78:	4b97      	ldr	r3, [pc, #604]	@ (8000ed8 <main+0x2b4>)
 8000c7a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c80:	4b95      	ldr	r3, [pc, #596]	@ (8000ed8 <main+0x2b4>)
 8000c82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c86:	639a      	str	r2, [r3, #56]	@ 0x38
				Motor_EL.Config.PWM.Maximum_frequency = 200000; Motor_EL.Config.PWM.Minimum_frequency = 20000; Motor_EL.Config.PWM.Increment_frequency = 10000;
 8000c88:	4b95      	ldr	r3, [pc, #596]	@ (8000ee0 <main+0x2bc>)
 8000c8a:	4a98      	ldr	r2, [pc, #608]	@ (8000eec <main+0x2c8>)
 8000c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c8e:	4b94      	ldr	r3, [pc, #592]	@ (8000ee0 <main+0x2bc>)
 8000c90:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c96:	4b92      	ldr	r3, [pc, #584]	@ (8000ee0 <main+0x2bc>)
 8000c98:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* Convertor */
				Motor_AZ.Config.Convertor.Convertor = &hadc1;
 8000c9e:	4b8e      	ldr	r3, [pc, #568]	@ (8000ed8 <main+0x2b4>)
 8000ca0:	4a93      	ldr	r2, [pc, #588]	@ (8000ef0 <main+0x2cc>)
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
				Motor_EL.Config.Convertor.Convertor = &hadc2;
 8000ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8000ee0 <main+0x2bc>)
 8000ca6:	4a93      	ldr	r2, [pc, #588]	@ (8000ef4 <main+0x2d0>)
 8000ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

				Motor_AZ.Config.Convertor.Maximum_discrete_level = 2150; Motor_AZ.Config.Convertor.Minimum_discrete_level = 1550; Motor_AZ.Config.Convertor.Middle_discrete_level = 1850;
 8000caa:	4b8b      	ldr	r3, [pc, #556]	@ (8000ed8 <main+0x2b4>)
 8000cac:	f640 0266 	movw	r2, #2150	@ 0x866
 8000cb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cb2:	4b89      	ldr	r3, [pc, #548]	@ (8000ed8 <main+0x2b4>)
 8000cb4:	f240 620e 	movw	r2, #1550	@ 0x60e
 8000cb8:	649a      	str	r2, [r3, #72]	@ 0x48
 8000cba:	4b87      	ldr	r3, [pc, #540]	@ (8000ed8 <main+0x2b4>)
 8000cbc:	f240 723a 	movw	r2, #1850	@ 0x73a
 8000cc0:	645a      	str	r2, [r3, #68]	@ 0x44
				Motor_EL.Config.Convertor.Maximum_discrete_level = 2150; Motor_EL.Config.Convertor.Minimum_discrete_level = 2050; Motor_EL.Config.Convertor.Middle_discrete_level = 2100;
 8000cc2:	4b87      	ldr	r3, [pc, #540]	@ (8000ee0 <main+0x2bc>)
 8000cc4:	f640 0266 	movw	r2, #2150	@ 0x866
 8000cc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cca:	4b85      	ldr	r3, [pc, #532]	@ (8000ee0 <main+0x2bc>)
 8000ccc:	f640 0202 	movw	r2, #2050	@ 0x802
 8000cd0:	649a      	str	r2, [r3, #72]	@ 0x48
 8000cd2:	4b83      	ldr	r3, [pc, #524]	@ (8000ee0 <main+0x2bc>)
 8000cd4:	f640 0234 	movw	r2, #2100	@ 0x834
 8000cd8:	645a      	str	r2, [r3, #68]	@ 0x44

				Motor_AZ.Config.Convertor.Inv_discrete_range = 1.0f / (Motor_AZ.Config.Convertor.Maximum_discrete_level - Motor_AZ.Config.Convertor.Minimum_discrete_level);
 8000cda:	4b7f      	ldr	r3, [pc, #508]	@ (8000ed8 <main+0x2b4>)
 8000cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cde:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed8 <main+0x2b4>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf4:	4b78      	ldr	r3, [pc, #480]	@ (8000ed8 <main+0x2b4>)
 8000cf6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				Motor_EL.Config.Convertor.Inv_discrete_range = 1.0f / (Motor_EL.Config.Convertor.Maximum_discrete_level - Motor_EL.Config.Convertor.Minimum_discrete_level);
 8000cfa:	4b79      	ldr	r3, [pc, #484]	@ (8000ee0 <main+0x2bc>)
 8000cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cfe:	4b78      	ldr	r3, [pc, #480]	@ (8000ee0 <main+0x2bc>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d14:	4b72      	ldr	r3, [pc, #456]	@ (8000ee0 <main+0x2bc>)
 8000d16:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
			/* Angular */
				Motor_AZ.Config.Angular.Maximum_angular = 270.0f; Motor_AZ.Config.Angular.Minimum_angular = -270.0f;
 8000d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed8 <main+0x2b4>)
 8000d1c:	4a76      	ldr	r2, [pc, #472]	@ (8000ef8 <main+0x2d4>)
 8000d1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8000d20:	4b6d      	ldr	r3, [pc, #436]	@ (8000ed8 <main+0x2b4>)
 8000d22:	4a76      	ldr	r2, [pc, #472]	@ (8000efc <main+0x2d8>)
 8000d24:	655a      	str	r2, [r3, #84]	@ 0x54
				Motor_EL.Config.Angular.Maximum_angular = 90.0f; Motor_EL.Config.Angular.Minimum_angular = -20.0f;
 8000d26:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee0 <main+0x2bc>)
 8000d28:	4a75      	ldr	r2, [pc, #468]	@ (8000f00 <main+0x2dc>)
 8000d2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8000d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8000ee0 <main+0x2bc>)
 8000d2e:	4a75      	ldr	r2, [pc, #468]	@ (8000f04 <main+0x2e0>)
 8000d30:	655a      	str	r2, [r3, #84]	@ 0x54

				Motor_AZ.Config.Angular.Deviation = 50.0f; Motor_AZ.Config.Angular.Guidance_accuracy = 1.0f;
 8000d32:	4b69      	ldr	r3, [pc, #420]	@ (8000ed8 <main+0x2b4>)
 8000d34:	4a74      	ldr	r2, [pc, #464]	@ (8000f08 <main+0x2e4>)
 8000d36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d38:	4b67      	ldr	r3, [pc, #412]	@ (8000ed8 <main+0x2b4>)
 8000d3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d3e:	659a      	str	r2, [r3, #88]	@ 0x58
				Motor_EL.Config.Angular.Deviation = 5.0f; Motor_EL.Config.Angular.Guidance_accuracy = 1.0f;
 8000d40:	4b67      	ldr	r3, [pc, #412]	@ (8000ee0 <main+0x2bc>)
 8000d42:	4a72      	ldr	r2, [pc, #456]	@ (8000f0c <main+0x2e8>)
 8000d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d46:	4b66      	ldr	r3, [pc, #408]	@ (8000ee0 <main+0x2bc>)
 8000d48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d4c:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Alfa */
				Motor_AZ.Config.Alfa = 0.2f;
 8000d4e:	4b62      	ldr	r3, [pc, #392]	@ (8000ed8 <main+0x2b4>)
 8000d50:	4a6f      	ldr	r2, [pc, #444]	@ (8000f10 <main+0x2ec>)
 8000d52:	661a      	str	r2, [r3, #96]	@ 0x60
				Motor_EL.Config.Alfa = 0.2f;
 8000d54:	4b62      	ldr	r3, [pc, #392]	@ (8000ee0 <main+0x2bc>)
 8000d56:	4a6e      	ldr	r2, [pc, #440]	@ (8000f10 <main+0x2ec>)
 8000d58:	661a      	str	r2, [r3, #96]	@ 0x60

		/* Status */
			Motor_AZ.Status.Angular = 0.0f; Motor_AZ.Status.filter_Angular = 0.0f;
 8000d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ed8 <main+0x2b4>)
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed8 <main+0x2b4>)
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
			Motor_EL.Status.Angular = 0.0f; Motor_EL.Status.filter_Angular = 0.0f;
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <main+0x2bc>)
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	4b5b      	ldr	r3, [pc, #364]	@ (8000ee0 <main+0x2bc>)
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]

			Motor_AZ.Status.Discrete_level = 1550; Motor_AZ.Status.filtered_Discrete_level = 1550;
 8000d7a:	4b57      	ldr	r3, [pc, #348]	@ (8000ed8 <main+0x2b4>)
 8000d7c:	4a65      	ldr	r2, [pc, #404]	@ (8000f14 <main+0x2f0>)
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	4b55      	ldr	r3, [pc, #340]	@ (8000ed8 <main+0x2b4>)
 8000d82:	4a64      	ldr	r2, [pc, #400]	@ (8000f14 <main+0x2f0>)
 8000d84:	611a      	str	r2, [r3, #16]
			Motor_EL.Status.Discrete_level = 1550; Motor_EL.Status.filtered_Discrete_level = 1550;
 8000d86:	4b56      	ldr	r3, [pc, #344]	@ (8000ee0 <main+0x2bc>)
 8000d88:	4a62      	ldr	r2, [pc, #392]	@ (8000f14 <main+0x2f0>)
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	4b54      	ldr	r3, [pc, #336]	@ (8000ee0 <main+0x2bc>)
 8000d8e:	4a61      	ldr	r2, [pc, #388]	@ (8000f14 <main+0x2f0>)
 8000d90:	611a      	str	r2, [r3, #16]

			Motor_AZ.Status.Frequency = 20000;
 8000d92:	4b51      	ldr	r3, [pc, #324]	@ (8000ed8 <main+0x2b4>)
 8000d94:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d98:	601a      	str	r2, [r3, #0]
			Motor_EL.Status.Frequency = 20000;
 8000d9a:	4b51      	ldr	r3, [pc, #324]	@ (8000ee0 <main+0x2bc>)
 8000d9c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000da0:	601a      	str	r2, [r3, #0]

			Motor_AZ.Status.Moving = 0;
 8000da2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed8 <main+0x2b4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	721a      	strb	r2, [r3, #8]
			Motor_EL.Status.Moving = 0;
 8000da8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee0 <main+0x2bc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	721a      	strb	r2, [r3, #8]

	/* Raspberry Pi */
		Target.Rx_data[0] = 'A'; Target.Rx_data[1] = 'z';
 8000dae:	4b5a      	ldr	r3, [pc, #360]	@ (8000f18 <main+0x2f4>)
 8000db0:	2241      	movs	r2, #65	@ 0x41
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <main+0x2f4>)
 8000db6:	227a      	movs	r2, #122	@ 0x7a
 8000db8:	705a      	strb	r2, [r3, #1]
		Target.Rx_data[2] = '+'; 	Target.Rx_data[3] = '0';  Target.Rx_data[4] = '0';  Target.Rx_data[5] = '0';  /* , */ ; Target.Rx_data[6] = '0';
 8000dba:	4b57      	ldr	r3, [pc, #348]	@ (8000f18 <main+0x2f4>)
 8000dbc:	222b      	movs	r2, #43	@ 0x2b
 8000dbe:	709a      	strb	r2, [r3, #2]
 8000dc0:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <main+0x2f4>)
 8000dc2:	2230      	movs	r2, #48	@ 0x30
 8000dc4:	70da      	strb	r2, [r3, #3]
 8000dc6:	4b54      	ldr	r3, [pc, #336]	@ (8000f18 <main+0x2f4>)
 8000dc8:	2230      	movs	r2, #48	@ 0x30
 8000dca:	711a      	strb	r2, [r3, #4]
 8000dcc:	4b52      	ldr	r3, [pc, #328]	@ (8000f18 <main+0x2f4>)
 8000dce:	2230      	movs	r2, #48	@ 0x30
 8000dd0:	715a      	strb	r2, [r3, #5]
 8000dd2:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <main+0x2f4>)
 8000dd4:	2230      	movs	r2, #48	@ 0x30
 8000dd6:	719a      	strb	r2, [r3, #6]

		Target.Rx_data[7] = 'E'; Target.Rx_data[8] = 'l';
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000f18 <main+0x2f4>)
 8000dda:	2245      	movs	r2, #69	@ 0x45
 8000ddc:	71da      	strb	r2, [r3, #7]
 8000dde:	4b4e      	ldr	r3, [pc, #312]	@ (8000f18 <main+0x2f4>)
 8000de0:	226c      	movs	r2, #108	@ 0x6c
 8000de2:	721a      	strb	r2, [r3, #8]
		Target.Rx_data[9] = '-'; 	Target.Rx_data[10] = '0'; Target.Rx_data[11] = '0'; Target.Rx_data[12] = '0'; /* , */ ; Target.Rx_data[13] = '0';
 8000de4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <main+0x2f4>)
 8000de6:	222d      	movs	r2, #45	@ 0x2d
 8000de8:	725a      	strb	r2, [r3, #9]
 8000dea:	4b4b      	ldr	r3, [pc, #300]	@ (8000f18 <main+0x2f4>)
 8000dec:	2230      	movs	r2, #48	@ 0x30
 8000dee:	729a      	strb	r2, [r3, #10]
 8000df0:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <main+0x2f4>)
 8000df2:	2230      	movs	r2, #48	@ 0x30
 8000df4:	72da      	strb	r2, [r3, #11]
 8000df6:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <main+0x2f4>)
 8000df8:	2230      	movs	r2, #48	@ 0x30
 8000dfa:	731a      	strb	r2, [r3, #12]
 8000dfc:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <main+0x2f4>)
 8000dfe:	2230      	movs	r2, #48	@ 0x30
 8000e00:	735a      	strb	r2, [r3, #13]

		Target.Rx_data[14] = 'F'; Target.Rx_data[15] = 'm';
 8000e02:	4b45      	ldr	r3, [pc, #276]	@ (8000f18 <main+0x2f4>)
 8000e04:	2246      	movs	r2, #70	@ 0x46
 8000e06:	739a      	strb	r2, [r3, #14]
 8000e08:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <main+0x2f4>)
 8000e0a:	226d      	movs	r2, #109	@ 0x6d
 8000e0c:	73da      	strb	r2, [r3, #15]
		Target.Rx_data[16] = '9';
 8000e0e:	4b42      	ldr	r3, [pc, #264]	@ (8000f18 <main+0x2f4>)
 8000e10:	2239      	movs	r2, #57	@ 0x39
 8000e12:	741a      	strb	r2, [r3, #16]

		Target.Rx_data[17] = '\r'; Target.Rx_data[18] = '\n'; Target.Rx_data[19] = '\0';
 8000e14:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <main+0x2f4>)
 8000e16:	220d      	movs	r2, #13
 8000e18:	745a      	strb	r2, [r3, #17]
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <main+0x2f4>)
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	749a      	strb	r2, [r3, #18]
 8000e20:	4b3d      	ldr	r3, [pc, #244]	@ (8000f18 <main+0x2f4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	74da      	strb	r2, [r3, #19]

		Target.Tx_data[0] = 'T';
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <main+0x2f4>)
 8000e28:	2254      	movs	r2, #84	@ 0x54
 8000e2a:	751a      	strb	r2, [r3, #20]
		Target.Tx_data[11] = '\r';
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <main+0x2f4>)
 8000e2e:	220d      	movs	r2, #13
 8000e30:	77da      	strb	r2, [r3, #31]
		Target.Tx_data[12] = '\n';
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <main+0x2f4>)
 8000e34:	220a      	movs	r2, #10
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

	Size_Rx_UART = sizeof(Target.Rx_data);
 8000e3a:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <main+0x2f8>)
 8000e3c:	2214      	movs	r2, #20
 8000e3e:	601a      	str	r2, [r3, #0]
	Size_Tx_UART = sizeof(Target.Tx_data);
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <main+0x2fc>)
 8000e42:	220d      	movs	r2, #13
 8000e44:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f000 fd9d 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f905 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 faef 	bl	8001430 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e52:	f000 f96b 	bl	800112c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e56:	f000 f9bb 	bl	80011d0 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000e5a:	f000 fabf 	bl	80013dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e5e:	f000 fa09 	bl	8001274 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e62:	f000 fa61 	bl	8001328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8000e66:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <main+0x2f8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	492a      	ldr	r1, [pc, #168]	@ (8000f18 <main+0x2f4>)
 8000e70:	482c      	ldr	r0, [pc, #176]	@ (8000f24 <main+0x300>)
 8000e72:	f003 fa9a 	bl	80043aa <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_AD_Conversion(&Motor_AZ);
 8000e76:	4818      	ldr	r0, [pc, #96]	@ (8000ed8 <main+0x2b4>)
 8000e78:	f7ff fbac 	bl	80005d4 <Read_AD_Conversion>
	  Read_AD_Conversion(&Motor_EL);
 8000e7c:	4818      	ldr	r0, [pc, #96]	@ (8000ee0 <main+0x2bc>)
 8000e7e:	f7ff fba9 	bl	80005d4 <Read_AD_Conversion>
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <main+0x2b4>)
 8000e84:	607b      	str	r3, [r7, #4]
    register const float a = Motor_xx->Status.Angular;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	ed93 8a05 	vldr	s16, [r3, #20]
    register const float* c = &Motor_xx->Config.Angular.Minimum_angular;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f103 0454 	add.w	r4, r3, #84	@ 0x54
    register const float lower = c[0] + c[3];
 8000e92:	ed94 7a00 	vldr	s14, [r4]
 8000e96:	f104 030c 	add.w	r3, r4, #12
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ee37 9a27 	vadd.f32	s18, s14, s15
    register const float upper = c[1] - c[3];
 8000ea2:	1d23      	adds	r3, r4, #4
 8000ea4:	ed93 7a00 	vldr	s14, [r3]
 8000ea8:	f104 030c 	add.w	r3, r4, #12
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ee77 8a67 	vsub.f32	s17, s14, s15
    return (a > lower) & (a < upper);
 8000eb4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	bfcc      	ite	gt
 8000ebe:	2301      	movgt	r3, #1
 8000ec0:	2300      	movle	r3, #0
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8000ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ecc:	bf4c      	ite	mi
 8000ece:	2301      	movmi	r3, #1
 8000ed0:	2300      	movpl	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	e027      	b.n	8000f28 <main+0x304>
 8000ed8:	20000190 	.word	0x20000190
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	200001f4 	.word	0x200001f4
 8000ee4:	20000100 	.word	0x20000100
 8000ee8:	200000b8 	.word	0x200000b8
 8000eec:	00030d40 	.word	0x00030d40
 8000ef0:	20000028 	.word	0x20000028
 8000ef4:	20000070 	.word	0x20000070
 8000ef8:	43870000 	.word	0x43870000
 8000efc:	c3870000 	.word	0xc3870000
 8000f00:	42b40000 	.word	0x42b40000
 8000f04:	c1a00000 	.word	0xc1a00000
 8000f08:	42480000 	.word	0x42480000
 8000f0c:	40a00000 	.word	0x40a00000
 8000f10:	3e4ccccd 	.word	0x3e4ccccd
 8000f14:	44c1c000 	.word	0x44c1c000
 8000f18:	20000258 	.word	0x20000258
 8000f1c:	20000288 	.word	0x20000288
 8000f20:	2000028c 	.word	0x2000028c
 8000f24:	20000148 	.word	0x20000148
 8000f28:	b2db      	uxtb	r3, r3

	  if (Working_area(&Motor_AZ))
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d027      	beq.n	8000f7e <main+0x35a>
	  {
		  if (fabsf(Target.Azimuth_difference) > Motor_AZ.Config.Angular.Guidance_accuracy)
 8000f2e:	4b47      	ldr	r3, [pc, #284]	@ (800104c <main+0x428>)
 8000f30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f34:	eeb0 7ae7 	vabs.f32	s14, s15
 8000f38:	4b45      	ldr	r3, [pc, #276]	@ (8001050 <main+0x42c>)
 8000f3a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8000f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	dd0c      	ble.n	8000f62 <main+0x33e>
		  {
			  if (!Motor_AZ.Status.Moving)
 8000f48:	4b41      	ldr	r3, [pc, #260]	@ (8001050 <main+0x42c>)
 8000f4a:	7a1b      	ldrb	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <main+0x336>
			  {
				  Start_motor(&Target, &Motor_AZ);
 8000f50:	493f      	ldr	r1, [pc, #252]	@ (8001050 <main+0x42c>)
 8000f52:	483e      	ldr	r0, [pc, #248]	@ (800104c <main+0x428>)
 8000f54:	f7ff fd60 	bl	8000a18 <Start_motor>
 8000f58:	e019      	b.n	8000f8e <main+0x36a>
			  }
			  else
			  {
				  Up_fequency(&Motor_AZ);
 8000f5a:	483d      	ldr	r0, [pc, #244]	@ (8001050 <main+0x42c>)
 8000f5c:	f7ff fdb2 	bl	8000ac4 <Up_fequency>
 8000f60:	e015      	b.n	8000f8e <main+0x36a>
			  }
		  }
		  else if (fabsf(Target.Azimuth_difference) > 0)
 8000f62:	4b3a      	ldr	r3, [pc, #232]	@ (800104c <main+0x428>)
 8000f64:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f68:	eef0 7ae7 	vabs.f32	s15, s15
 8000f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f74:	dc0b      	bgt.n	8000f8e <main+0x36a>
		  {
			  // Сопровождение_цели
		  }
		  else
		  {
			  Stop_motor(&Motor_AZ);
 8000f76:	4836      	ldr	r0, [pc, #216]	@ (8001050 <main+0x42c>)
 8000f78:	f7ff fdd5 	bl	8000b26 <Stop_motor>
 8000f7c:	e007      	b.n	8000f8e <main+0x36a>
		  };

	  }
	  else
	  {
		  Stop_motor(&Motor_AZ);
 8000f7e:	4834      	ldr	r0, [pc, #208]	@ (8001050 <main+0x42c>)
 8000f80:	f7ff fdd1 	bl	8000b26 <Stop_motor>
		  Moving_away_from_borders(&Motor_AZ, 1000);
 8000f84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f88:	4831      	ldr	r0, [pc, #196]	@ (8001050 <main+0x42c>)
 8000f8a:	f7ff fde7 	bl	8000b5c <Moving_away_from_borders>
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <main+0x430>)
 8000f90:	603b      	str	r3, [r7, #0]
    register const float a = Motor_xx->Status.Angular;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	ed93 8a05 	vldr	s16, [r3, #20]
    register const float* c = &Motor_xx->Config.Angular.Minimum_angular;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f103 0454 	add.w	r4, r3, #84	@ 0x54
    register const float lower = c[0] + c[3];
 8000f9e:	ed94 7a00 	vldr	s14, [r4]
 8000fa2:	f104 030c 	add.w	r3, r4, #12
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ee37 9a27 	vadd.f32	s18, s14, s15
    register const float upper = c[1] - c[3];
 8000fae:	1d23      	adds	r3, r4, #4
 8000fb0:	ed93 7a00 	vldr	s14, [r3]
 8000fb4:	f104 030c 	add.w	r3, r4, #12
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	ee77 8a67 	vsub.f32	s17, s14, s15
    return (a > lower) & (a < upper);
 8000fc0:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	bfcc      	ite	gt
 8000fca:	2301      	movgt	r3, #1
 8000fcc:	2300      	movle	r3, #0
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	bf4c      	ite	mi
 8000fda:	2301      	movmi	r3, #1
 8000fdc:	2300      	movpl	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
	  };

	  if (Working_area(&Motor_EL))
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d027      	beq.n	8001038 <main+0x414>
	  {
		  if (fabsf(Target.Elevation_difference) > Motor_EL.Config.Angular.Guidance_accuracy)
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <main+0x428>)
 8000fea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000fee:	eeb0 7ae7 	vabs.f32	s14, s15
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <main+0x430>)
 8000ff4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd0c      	ble.n	800101c <main+0x3f8>
		  {
			  if (!Motor_EL.Status.Moving)
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <main+0x430>)
 8001004:	7a1b      	ldrb	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d104      	bne.n	8001014 <main+0x3f0>
			  {
				  Start_motor(&Target, &Motor_EL);
 800100a:	4912      	ldr	r1, [pc, #72]	@ (8001054 <main+0x430>)
 800100c:	480f      	ldr	r0, [pc, #60]	@ (800104c <main+0x428>)
 800100e:	f7ff fd03 	bl	8000a18 <Start_motor>
 8001012:	e018      	b.n	8001046 <main+0x422>
			  }
			  else
			  {
				  Up_fequency(&Motor_EL);
 8001014:	480f      	ldr	r0, [pc, #60]	@ (8001054 <main+0x430>)
 8001016:	f7ff fd55 	bl	8000ac4 <Up_fequency>
 800101a:	e014      	b.n	8001046 <main+0x422>
			  };
		  }
		  else if (fabsf(Target.Elevation_difference) > 0)
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <main+0x428>)
 800101e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001022:	eef0 7ae7 	vabs.f32	s15, s15
 8001026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	dc0a      	bgt.n	8001046 <main+0x422>

			  // Сопровождение_цели
		  }
		  else
		  {
			  Stop_motor(&Motor_EL);
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <main+0x430>)
 8001032:	f7ff fd78 	bl	8000b26 <Stop_motor>
 8001036:	e006      	b.n	8001046 <main+0x422>
			  // Поведение_не_определено
		  };
	  }
	  else
	  {
		  Stop_motor(&Motor_EL);
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <main+0x430>)
 800103a:	f7ff fd74 	bl	8000b26 <Stop_motor>
		  Moving_away_from_borders(&Motor_EL, 100);
 800103e:	2164      	movs	r1, #100	@ 0x64
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <main+0x430>)
 8001042:	f7ff fd8b 	bl	8000b5c <Moving_away_from_borders>
	  };

	  Transmet_computer();
 8001046:	f7ff fb77 	bl	8000738 <Transmet_computer>
	  Read_AD_Conversion(&Motor_AZ);
 800104a:	e714      	b.n	8000e76 <main+0x252>
 800104c:	20000258 	.word	0x20000258
 8001050:	20000190 	.word	0x20000190
 8001054:	200001f4 	.word	0x200001f4

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	@ 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	@ 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f004 f930 	bl	80052cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	@ (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	@ 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <SystemClock_Config+0xd0>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c8:	2308      	movs	r3, #8
 80010ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fd78 	bl	8002bd4 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ea:	f000 fa0f 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f2:	2302      	movs	r3, #2
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001104:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2105      	movs	r1, #5
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ffd9 	bl	80030c4 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001118:	f000 f9f8 	bl	800150c <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	@ 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001140:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <MX_ADC1_Init+0x9c>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001146:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800114a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <MX_ADC1_Init+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001158:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_ADC1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115e:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_ADC1_Init+0x98>)
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <MX_ADC1_Init+0xa0>)
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_ADC1_Init+0x98>)
 800117a:	2201      	movs	r2, #1
 800117c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_ADC1_Init+0x98>)
 8001188:	2201      	movs	r2, #1
 800118a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_ADC1_Init+0x98>)
 800118e:	f000 fc8f 	bl	8001ab0 <HAL_ADC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 f9b8 	bl	800150c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800119c:	230e      	movs	r3, #14
 800119e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_ADC1_Init+0x98>)
 80011ae:	f000 ff8f 	bl	80020d0 <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011b8:	f000 f9a8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000028 	.word	0x20000028
 80011c8:	40012000 	.word	0x40012000
 80011cc:	0f000001 	.word	0x0f000001

080011d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_ADC2_Init+0x98>)
 80011e4:	4a21      	ldr	r2, [pc, #132]	@ (800126c <MX_ADC2_Init+0x9c>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_ADC2_Init+0x98>)
 80011ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <MX_ADC2_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_ADC2_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_ADC2_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <MX_ADC2_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_ADC2_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_ADC2_Init+0x98>)
 8001212:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <MX_ADC2_Init+0xa0>)
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_ADC2_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_ADC2_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_ADC2_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_ADC2_Init+0x98>)
 800122c:	2201      	movs	r2, #1
 800122e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001230:	480d      	ldr	r0, [pc, #52]	@ (8001268 <MX_ADC2_Init+0x98>)
 8001232:	f000 fc3d 	bl	8001ab0 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 f966 	bl	800150c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001240:	230f      	movs	r3, #15
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_ADC2_Init+0x98>)
 8001252:	f000 ff3d 	bl	80020d0 <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800125c:	f000 f956 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000070 	.word	0x20000070
 800126c:	40012100 	.word	0x40012100
 8001270:	0f000001 	.word	0x0f000001

08001274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <MX_TIM2_Init+0xb0>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012c2:	f002 f91f 	bl	8003504 <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f000 f91e 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4619      	mov	r1, r3
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <MX_TIM2_Init+0xb0>)
 80012e0:	f002 fef8 	bl	80040d4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012ea:	f000 f90f 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	@ 0x60
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80012f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM2_Init+0xb0>)
 8001308:	f002 fb74 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001312:	f000 f8fb 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001316:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM2_Init+0xb0>)
 8001318:	f000 f9ee 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	@ 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000b8 	.word	0x200000b8

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <MX_TIM3_Init+0xac>)
 800134c:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <MX_TIM3_Init+0xb0>)
 800134e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <MX_TIM3_Init+0xac>)
 8001352:	2201      	movs	r2, #1
 8001354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <MX_TIM3_Init+0xac>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <MX_TIM3_Init+0xac>)
 800135e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <MX_TIM3_Init+0xac>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <MX_TIM3_Init+0xac>)
 800136c:	2280      	movs	r2, #128	@ 0x80
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001370:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <MX_TIM3_Init+0xac>)
 8001372:	f002 f8c7 	bl	8003504 <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800137c:	f000 f8c6 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	@ (80013d4 <MX_TIM3_Init+0xac>)
 8001390:	f002 fea0 	bl	80040d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800139a:	f000 f8b7 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	@ 0x60
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80013a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_TIM3_Init+0xac>)
 80013b8:	f002 fb1c 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80013c2:	f000 f8a3 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013c6:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_TIM3_Init+0xac>)
 80013c8:	f000 f996 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000100 	.word	0x20000100
 80013d8:	40000400 	.word	0x40000400

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <MX_USART2_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_USART2_UART_Init+0x4c>)
 8001414:	f002 feee 	bl	80041f4 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 f875 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000148 	.word	0x20000148
 800142c:	40004400 	.word	0x40004400

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <MX_GPIO_Init+0xd4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <MX_GPIO_Init+0xd4>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a1f      	ldr	r2, [pc, #124]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_GPIO_Init+0xd4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <MX_GPIO_Init+0xd4>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_GPIO_Init+0xd4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_GPIO_Init+0xd4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <MX_GPIO_Init+0xd4>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_GPIO_Init+0xd4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <MX_GPIO_Init+0xd8>)
 80014da:	f001 fb61 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80014de:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_GPIO_Init+0xd8>)
 80014f8:	f001 f9b6 	bl	8002868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	@ 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40021000 	.word	0x40021000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
	__disable_irq();
	while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <Error_Handler+0x8>

08001518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <HAL_MspInit+0x4c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <HAL_MspInit+0x4c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	@ 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a36      	ldr	r2, [pc, #216]	@ (8001660 <HAL_ADC_MspInit+0xf8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d130      	bne.n	80015ec <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a34      	ldr	r2, [pc, #208]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015c2:	2310      	movs	r3, #16
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4824      	ldr	r0, [pc, #144]	@ (8001668 <HAL_ADC_MspInit+0x100>)
 80015d6:	f001 f947 	bl	8002868 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 f879 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015e4:	2012      	movs	r0, #18
 80015e6:	f001 f892 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015ea:	e034      	b.n	8001656 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1e      	ldr	r2, [pc, #120]	@ (800166c <HAL_ADC_MspInit+0x104>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12f      	bne.n	8001656 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 8001600:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_ADC_MspInit+0xfc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800162e:	2320      	movs	r3, #32
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4809      	ldr	r0, [pc, #36]	@ (8001668 <HAL_ADC_MspInit+0x100>)
 8001642:	f001 f911 	bl	8002868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2012      	movs	r0, #18
 800164c:	f001 f843 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001650:	2012      	movs	r0, #18
 8001652:	f001 f85c 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3730      	adds	r7, #48	@ 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	40012100 	.word	0x40012100

08001670 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001680:	d116      	bne.n	80016b0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <HAL_TIM_PWM_MspInit+0x80>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	201c      	movs	r0, #28
 80016a4:	f001 f817 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a8:	201c      	movs	r0, #28
 80016aa:	f001 f830 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ae:	e01a      	b.n	80016e6 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_TIM_PWM_MspInit+0x84>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d115      	bne.n	80016e6 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_TIM_PWM_MspInit+0x80>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_TIM_PWM_MspInit+0x80>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_TIM_PWM_MspInit+0x80>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201d      	movs	r0, #29
 80016dc:	f000 fffb 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e0:	201d      	movs	r0, #29
 80016e2:	f001 f814 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40000400 	.word	0x40000400

080016f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001718:	d11e      	bne.n	8001758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001736:	2320      	movs	r3, #32
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001746:	2301      	movs	r3, #1
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4816      	ldr	r0, [pc, #88]	@ (80017ac <HAL_TIM_MspPostInit+0xb4>)
 8001752:	f001 f889 	bl	8002868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001756:	e022      	b.n	800179e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <HAL_TIM_MspPostInit+0xb8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d11d      	bne.n	800179e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177e:	2340      	movs	r3, #64	@ 0x40
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800178e:	2302      	movs	r3, #2
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4804      	ldr	r0, [pc, #16]	@ (80017ac <HAL_TIM_MspPostInit+0xb4>)
 800179a:	f001 f865 	bl	8002868 <HAL_GPIO_Init>
}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	@ 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40000400 	.word	0x40000400

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <HAL_UART_MspInit+0x94>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d133      	bne.n	800183e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HAL_UART_MspInit+0x98>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_UART_MspInit+0x98>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_UART_MspInit+0x98>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_UART_MspInit+0x98>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a14      	ldr	r2, [pc, #80]	@ (800184c <HAL_UART_MspInit+0x98>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_UART_MspInit+0x98>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	@ (8001850 <HAL_UART_MspInit+0x9c>)
 800182a:	f001 f81d 	bl	8002868 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2026      	movs	r0, #38	@ 0x26
 8001834:	f000 ff4f 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001838:	2026      	movs	r0, #38	@ 0x26
 800183a:	f000 ff68 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	@ 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40004400 	.word	0x40004400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020c00 	.word	0x40020c00

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <NMI_Handler+0x4>

0800185c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <MemManage_Handler+0x4>

0800186c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <BusFault_Handler+0x4>

08001874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <UsageFault_Handler+0x4>

0800187c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018aa:	f000 f8bd 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <ADC_IRQHandler+0x14>)
 80018ba:	f000 facd 	bl	8001e58 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018be:	4803      	ldr	r0, [pc, #12]	@ (80018cc <ADC_IRQHandler+0x18>)
 80018c0:	f000 faca 	bl	8001e58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000028 	.word	0x20000028
 80018cc:	20000070 	.word	0x20000070

080018d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <TIM2_IRQHandler+0x10>)
 80018d6:	f001 ff9d 	bl	8003814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000b8 	.word	0x200000b8

080018e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <TIM3_IRQHandler+0x10>)
 80018ea:	f001 ff93 	bl	8003814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000100 	.word	0x20000100

080018f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <USART2_IRQHandler+0x10>)
 80018fe:	f002 fd79 	bl	80043f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000148 	.word	0x20000148

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f003 fcbd 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff f95f 	bl	8000c24 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001974:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 8001978:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800197c:	20000294 	.word	0x20000294

08001980 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <CAN1_RX0_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 fe87 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fdae 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fe9f 	bl	800272a <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 fe67 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000290 	.word	0x20000290

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000290 	.word	0x20000290

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e033      	b.n	8001b2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fd4a 	bl	8001568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001af6:	f023 0302 	bic.w	r3, r3, #2
 8001afa:	f043 0202 	orr.w	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fc06 	bl	8002314 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b1e:	e001      	b.n	8001b24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Start+0x1a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e0b2      	b.n	8001cb8 <HAL_ADC_Start+0x180>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d018      	beq.n	8001b9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b78:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <HAL_ADC_Start+0x18c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	@ (8001cc8 <HAL_ADC_Start+0x190>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9a      	lsrs	r2, r3, #18
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d17a      	bne.n	8001c9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f023 0206 	bic.w	r2, r3, #6
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_ADC_Start+0x194>)
 8001c06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12a      	bne.n	8001c74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd0 <HAL_ADC_Start+0x198>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d015      	beq.n	8001c54 <HAL_ADC_Start+0x11c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <HAL_ADC_Start+0x19c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_Start+0x106>
 8001c32:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <HAL_ADC_Start+0x194>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a25      	ldr	r2, [pc, #148]	@ (8001cd8 <HAL_ADC_Start+0x1a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d136      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_ADC_Start+0x194>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d130      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d129      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e020      	b.n	8001cb6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <HAL_ADC_Start+0x198>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d114      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00b      	b.n	8001cb6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	40012100 	.word	0x40012100
 8001cd8:	40012200 	.word	0x40012200

08001cdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Stop+0x16>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e021      	b.n	8001d36 <HAL_ADC_Stop+0x5a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5e:	d113      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d6e:	d10b      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	f043 0220 	orr.w	r2, r3, #32
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e063      	b.n	8001e50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d88:	f7ff fe62 	bl	8001a50 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d8e:	e021      	b.n	8001dd4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d96:	d01d      	beq.n	8001dd4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_ADC_PollForConversion+0x6c>
 8001d9e:	f7ff fe57 	bl	8001a50 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d212      	bcs.n	8001dd4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d00b      	beq.n	8001dd4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0204 	orr.w	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e03d      	b.n	8001e50 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d1d6      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f06f 0212 	mvn.w	r2, #18
 8001dea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d123      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11f      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d111      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d049      	beq.n	8001f22 <HAL_ADC_IRQHandler+0xca>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d046      	beq.n	8001f22 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d12b      	bne.n	8001f12 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d127      	bne.n	8001f12 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d119      	bne.n	8001f12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0220 	bic.w	r2, r2, #32
 8001eec:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8bd 	bl	8002092 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0212 	mvn.w	r2, #18
 8001f20:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d057      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x190>
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d054      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d139      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d12b      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d124      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d11d      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d119      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fb2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fa97 	bl	800250c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f06f 020c 	mvn.w	r2, #12
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d017      	beq.n	800202e <HAL_ADC_IRQHandler+0x1d6>
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d014      	beq.n	800202e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10d      	bne.n	800202e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f841 	bl	80020a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800203c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_ADC_IRQHandler+0x218>
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0220 	mvn.w	r2, #32
 800205e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f82a 	bl	80020ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f06f 0220 	mvn.w	r2, #32
 800206e:	601a      	str	r2, [r3, #0]
  }
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1c>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e105      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x228>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d925      	bls.n	8002148 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	3b1e      	subs	r3, #30
 8002112:	2207      	movs	r2, #7
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43da      	mvns	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	400a      	ands	r2, r1
 8002120:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68d9      	ldr	r1, [r3, #12]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	4603      	mov	r3, r0
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4403      	add	r3, r0
 800213a:	3b1e      	subs	r3, #30
 800213c:	409a      	lsls	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	e022      	b.n	800218e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	2207      	movs	r2, #7
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	4603      	mov	r3, r0
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4403      	add	r3, r0
 8002184:	409a      	lsls	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d824      	bhi.n	80021e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b05      	subs	r3, #5
 80021a8:	221f      	movs	r2, #31
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	400a      	ands	r2, r1
 80021b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b05      	subs	r3, #5
 80021d2:	fa00 f203 	lsl.w	r2, r0, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80021de:	e04c      	b.n	800227a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d824      	bhi.n	8002232 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b23      	subs	r3, #35	@ 0x23
 80021fa:	221f      	movs	r2, #31
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43da      	mvns	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	400a      	ands	r2, r1
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b23      	subs	r3, #35	@ 0x23
 8002224:	fa00 f203 	lsl.w	r2, r0, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002230:	e023      	b.n	800227a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b41      	subs	r3, #65	@ 0x41
 8002244:	221f      	movs	r2, #31
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	400a      	ands	r2, r1
 8002252:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b41      	subs	r3, #65	@ 0x41
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227a:	4b22      	ldr	r3, [pc, #136]	@ (8002304 <HAL_ADC_ConfigChannel+0x234>)
 800227c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <HAL_ADC_ConfigChannel+0x238>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d109      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1cc>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b12      	cmp	r3, #18
 800228e:	d105      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_ADC_ConfigChannel+0x238>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d123      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x21e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d003      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x1e6>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b11      	cmp	r3, #17
 80022b4:	d11b      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d111      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_ADC_ConfigChannel+0x23c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a10      	ldr	r2, [pc, #64]	@ (8002310 <HAL_ADC_ConfigChannel+0x240>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	0c9a      	lsrs	r2, r3, #18
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40012300 	.word	0x40012300
 8002308:	40012000 	.word	0x40012000
 800230c:	20000000 	.word	0x20000000
 8002310:	431bde83 	.word	0x431bde83

08002314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231c:	4b79      	ldr	r3, [pc, #484]	@ (8002504 <ADC_Init+0x1f0>)
 800231e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	4a58      	ldr	r2, [pc, #352]	@ (8002508 <ADC_Init+0x1f4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00f      	b.n	8002412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0202 	bic.w	r2, r2, #2
 8002420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
 800242c:	005a      	lsls	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800244e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800245e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	3b01      	subs	r3, #1
 800246c:	035a      	lsls	r2, r3, #13
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	e007      	b.n	8002488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002486:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	051a      	lsls	r2, r3, #20
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024ca:	025a      	lsls	r2, r3, #9
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	029a      	lsls	r2, r3, #10
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	0f000001 	.word	0x0f000001

0800250c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	@ (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	@ (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff f97e 	bl	8001a50 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d008      	beq.n	8002774 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2280      	movs	r2, #128	@ 0x80
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e052      	b.n	800281a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0216 	bic.w	r2, r2, #22
 8002782:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002792:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <HAL_DMA_Abort+0x62>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0208 	bic.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c4:	e013      	b.n	80027ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c6:	f7ff f943 	bl	8001a50 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d90c      	bls.n	80027ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e015      	b.n	800281a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e4      	bne.n	80027c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002800:	223f      	movs	r2, #63	@ 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e00c      	b.n	800285a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2205      	movs	r2, #5
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	@ 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e16b      	b.n	8002b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 815a 	bne.w	8002b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d005      	beq.n	80028ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d130      	bne.n	800291c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 0201 	and.w	r2, r3, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b03      	cmp	r3, #3
 8002926:	d017      	beq.n	8002958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d123      	bne.n	80029ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80b4 	beq.w	8002b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b60      	ldr	r3, [pc, #384]	@ (8002b74 <HAL_GPIO_Init+0x30c>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b74 <HAL_GPIO_Init+0x30c>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002b74 <HAL_GPIO_Init+0x30c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002b78 <HAL_GPIO_Init+0x310>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_GPIO_Init+0x314>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d02b      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a51      	ldr	r2, [pc, #324]	@ (8002b80 <HAL_GPIO_Init+0x318>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x222>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a50      	ldr	r2, [pc, #320]	@ (8002b84 <HAL_GPIO_Init+0x31c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x21e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4f      	ldr	r2, [pc, #316]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x21a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4e      	ldr	r2, [pc, #312]	@ (8002b8c <HAL_GPIO_Init+0x324>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x216>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	@ (8002b90 <HAL_GPIO_Init+0x328>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	@ (8002b94 <HAL_GPIO_Init+0x32c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x20e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4b      	ldr	r2, [pc, #300]	@ (8002b98 <HAL_GPIO_Init+0x330>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x20a>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e00e      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a72:	2308      	movs	r3, #8
 8002a74:	e00c      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e00a      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	e008      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e004      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f002 0203 	and.w	r2, r2, #3
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	4093      	lsls	r3, r2
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa0:	4935      	ldr	r1, [pc, #212]	@ (8002b78 <HAL_GPIO_Init+0x310>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a32      	ldr	r2, [pc, #200]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a27      	ldr	r2, [pc, #156]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b02:	4b26      	ldr	r3, [pc, #152]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b26:	4a1d      	ldr	r2, [pc, #116]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	f67f ae90 	bls.w	8002884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e267      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d075      	beq.n	8002cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bf2:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b85      	ldr	r3, [pc, #532]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b82      	ldr	r3, [pc, #520]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b7e      	ldr	r3, [pc, #504]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e242      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x74>
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b70      	ldr	r3, [pc, #448]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6c      	ldr	r2, [pc, #432]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	4b69      	ldr	r3, [pc, #420]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a68      	ldr	r2, [pc, #416]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b66      	ldr	r3, [pc, #408]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fee0 	bl	8001a50 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fedc 	bl	8001a50 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e207      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xc0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fecc 	bl	8001a50 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fec8 	bl	8001a50 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1f3      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b51      	ldr	r3, [pc, #324]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0xe8>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cea:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b44      	ldr	r3, [pc, #272]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1c7      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4937      	ldr	r1, [pc, #220]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e03a      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_RCC_OscConfig+0x244>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fe81 	bl	8001a50 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe fe7d 	bl	8001a50 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1a8      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	4b2b      	ldr	r3, [pc, #172]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4925      	ldr	r1, [pc, #148]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <HAL_RCC_OscConfig+0x244>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fe60 	bl	8001a50 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fe5c 	bl	8001a50 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e187      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d036      	beq.n	8002e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_RCC_OscConfig+0x248>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fe40 	bl	8001a50 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fe3c 	bl	8001a50 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e167      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x200>
 8002df2:	e01b      	b.n	8002e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_RCC_OscConfig+0x248>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fe29 	bl	8001a50 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e00e      	b.n	8002e20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe fe25 	bl	8001a50 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d907      	bls.n	8002e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e150      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b88      	ldr	r3, [pc, #544]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ea      	bne.n	8002e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8097 	beq.w	8002f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b81      	ldr	r3, [pc, #516]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	4a7c      	ldr	r2, [pc, #496]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b77      	ldr	r3, [pc, #476]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b74      	ldr	r3, [pc, #464]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a73      	ldr	r2, [pc, #460]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fde5 	bl	8001a50 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe fde1 	bl	8001a50 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e10c      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2ea>
 8002eb0:	4b64      	ldr	r3, [pc, #400]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb4:	4a63      	ldr	r2, [pc, #396]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x324>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x30c>
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	4a5e      	ldr	r2, [pc, #376]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x324>
 8002ee0:	4b58      	ldr	r3, [pc, #352]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee4:	4a57      	ldr	r2, [pc, #348]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eec:	4b55      	ldr	r3, [pc, #340]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a54      	ldr	r2, [pc, #336]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fda6 	bl	8001a50 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fda2 	bl	8001a50 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0cb      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	4b49      	ldr	r3, [pc, #292]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCC_OscConfig+0x334>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fd90 	bl	8001a50 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fd8c 	bl	8001a50 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0b5      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	4a38      	ldr	r2, [pc, #224]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a1 	beq.w	80030b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f72:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d05c      	beq.n	8003038 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d141      	bne.n	800300a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_RCC_OscConfig+0x478>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fd60 	bl	8001a50 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe fd5c 	bl	8001a50 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e087      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	491b      	ldr	r1, [pc, #108]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_OscConfig+0x478>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fd35 	bl	8001a50 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe fd31 	bl	8001a50 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e05c      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x416>
 8003008:	e054      	b.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_RCC_OscConfig+0x478>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fd1e 	bl	8001a50 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fd1a 	bl	8001a50 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e045      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x444>
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e038      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
 800304c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x4ec>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d028      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d121      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0cc      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b68      	ldr	r3, [pc, #416]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d90c      	bls.n	8003100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b65      	ldr	r3, [pc, #404]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a58      	ldr	r2, [pc, #352]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003122:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800313a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d044      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d119      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	2b03      	cmp	r3, #3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	4b3f      	ldr	r3, [pc, #252]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e067      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a2:	4b37      	ldr	r3, [pc, #220]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 0203 	bic.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4934      	ldr	r1, [pc, #208]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b4:	f7fe fc4c 	bl	8001a50 <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031bc:	f7fe fc48 	bl	8001a50 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 020c 	and.w	r2, r3, #12
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d1eb      	bne.n	80031bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e4:	4b25      	ldr	r3, [pc, #148]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d20c      	bcs.n	800320c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b22      	ldr	r3, [pc, #136]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003236:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f821 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	@ (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fbac 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00
 8003280:	40023800 	.word	0x40023800
 8003284:	0800533c 	.word	0x0800533c
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003294:	b094      	sub	sp, #80	@ 0x50
 8003296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a8:	4b79      	ldr	r3, [pc, #484]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d00d      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x40>
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	f200 80e1 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x34>
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x3a>
 80032c2:	e0db      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b73      	ldr	r3, [pc, #460]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c8:	e0db      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ca:	4b73      	ldr	r3, [pc, #460]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x208>)
 80032cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ce:	e0d8      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032da:	4b6d      	ldr	r3, [pc, #436]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	2200      	movs	r2, #0
 80032ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fa:	2300      	movs	r3, #0
 80032fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003302:	4622      	mov	r2, r4
 8003304:	462b      	mov	r3, r5
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4621      	mov	r1, r4
 800331c:	1a51      	subs	r1, r2, r1
 800331e:	6139      	str	r1, [r7, #16]
 8003320:	4629      	mov	r1, r5
 8003322:	eb63 0301 	sbc.w	r3, r3, r1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003334:	4659      	mov	r1, fp
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333e:	4651      	mov	r1, sl
 8003340:	018a      	lsls	r2, r1, #6
 8003342:	4651      	mov	r1, sl
 8003344:	ebb2 0801 	subs.w	r8, r2, r1
 8003348:	4659      	mov	r1, fp
 800334a:	eb63 0901 	sbc.w	r9, r3, r1
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003362:	4690      	mov	r8, r2
 8003364:	4699      	mov	r9, r3
 8003366:	4623      	mov	r3, r4
 8003368:	eb18 0303 	adds.w	r3, r8, r3
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	462b      	mov	r3, r5
 8003370:	eb49 0303 	adc.w	r3, r9, r3
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003382:	4629      	mov	r1, r5
 8003384:	024b      	lsls	r3, r1, #9
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800338c:	4621      	mov	r1, r4
 800338e:	024a      	lsls	r2, r1, #9
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003396:	2200      	movs	r2, #0
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800339c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033a0:	f7fc ff12 	bl	80001c8 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ac:	e058      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	4611      	mov	r1, r2
 80033ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	f04f 0000 	mov.w	r0, #0
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033da:	0150      	lsls	r0, r2, #5
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4641      	mov	r1, r8
 80033e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e6:	4649      	mov	r1, r9
 80033e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003400:	ebb2 040a 	subs.w	r4, r2, sl
 8003404:	eb63 050b 	sbc.w	r5, r3, fp
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	464b      	mov	r3, r9
 8003424:	eb45 0303 	adc.w	r3, r5, r3
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003436:	4629      	mov	r1, r5
 8003438:	028b      	lsls	r3, r1, #10
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003440:	4621      	mov	r1, r4
 8003442:	028a      	lsls	r2, r1, #10
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	61fa      	str	r2, [r7, #28]
 8003450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003454:	f7fc feb8 	bl	80001c8 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4613      	mov	r3, r2
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	3301      	adds	r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800347a:	e002      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x204>)
 800347e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003484:	4618      	mov	r0, r3
 8003486:	3750      	adds	r7, #80	@ 0x50
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	0800534c 	.word	0x0800534c

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffdc 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	0800534c 	.word	0x0800534c

08003504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e041      	b.n	800359a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe f8a0 	bl	8001670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f000 fb4a 	bl	8003bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_TIM_PWM_Start+0x24>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e022      	b.n	800360e <HAL_TIM_PWM_Start+0x6a>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d109      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x3e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e015      	b.n	800360e <HAL_TIM_PWM_Start+0x6a>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d109      	bne.n	80035fc <HAL_TIM_PWM_Start+0x58>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e008      	b.n	800360e <HAL_TIM_PWM_Start+0x6a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e07c      	b.n	8003710 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <HAL_TIM_PWM_Start+0x82>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003624:	e013      	b.n	800364e <HAL_TIM_PWM_Start+0xaa>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d104      	bne.n	8003636 <HAL_TIM_PWM_Start+0x92>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003634:	e00b      	b.n	800364e <HAL_TIM_PWM_Start+0xaa>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0xa2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003644:	e003      	b.n	800364e <HAL_TIM_PWM_Start+0xaa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	6839      	ldr	r1, [r7, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fd16 	bl	8004088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2d      	ldr	r2, [pc, #180]	@ (8003718 <HAL_TIM_PWM_Start+0x174>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIM_PWM_Start+0xcc>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2c      	ldr	r2, [pc, #176]	@ (800371c <HAL_TIM_PWM_Start+0x178>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_TIM_PWM_Start+0xd0>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_TIM_PWM_Start+0xd2>
 8003674:	2300      	movs	r3, #0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <HAL_TIM_PWM_Start+0x174>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369c:	d01d      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003720 <HAL_TIM_PWM_Start+0x17c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <HAL_TIM_PWM_Start+0x180>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <HAL_TIM_PWM_Start+0x184>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_TIM_PWM_Start+0x178>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a18      	ldr	r2, [pc, #96]	@ (800372c <HAL_TIM_PWM_Start+0x188>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIM_PWM_Start+0x136>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <HAL_TIM_PWM_Start+0x18c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d111      	bne.n	80036fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b06      	cmp	r3, #6
 80036ea:	d010      	beq.n	800370e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	e007      	b.n	800370e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40010000 	.word	0x40010000
 800371c:	40010400 	.word	0x40010400
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40001800 	.word	0x40001800

08003734 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fc9e 	bl	8004088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2e      	ldr	r2, [pc, #184]	@ (800380c <HAL_TIM_PWM_Stop+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIM_PWM_Stop+0x2c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	@ (8003810 <HAL_TIM_PWM_Stop+0xdc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_TIM_PWM_Stop+0x30>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_TIM_PWM_Stop+0x32>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003774:	4013      	ands	r3, r2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <HAL_TIM_PWM_Stop+0x66>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	f240 4344 	movw	r3, #1092	@ 0x444
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <HAL_TIM_PWM_Stop+0x66>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_TIM_PWM_Stop+0x96>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <HAL_TIM_PWM_Stop+0x96>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_TIM_PWM_Stop+0xa6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d8:	e013      	b.n	8003802 <HAL_TIM_PWM_Stop+0xce>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d104      	bne.n	80037ea <HAL_TIM_PWM_Stop+0xb6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e8:	e00b      	b.n	8003802 <HAL_TIM_PWM_Stop+0xce>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Stop+0xc6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f8:	e003      	b.n	8003802 <HAL_TIM_PWM_Stop+0xce>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40010000 	.word	0x40010000
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0202 	mvn.w	r2, #2
 8003848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f99e 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f990 	bl	8003b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f9a1 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0204 	mvn.w	r2, #4
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f978 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f96a 	bl	8003b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f97b 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0208 	mvn.w	r2, #8
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f952 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f944 	bl	8003b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f955 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0210 	mvn.w	r2, #16
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2208      	movs	r2, #8
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f92c 	bl	8003ba0 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f91e 	bl	8003b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f92f 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0201 	mvn.w	r2, #1
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8fc 	bl	8003b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fc1e 	bl	80041e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00c      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f900 	bl	8003bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0220 	mvn.w	r2, #32
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fbf0 	bl	80041cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0ae      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	f200 809f 	bhi.w	8003b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a22:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003b61 	.word	0x08003b61
 8003a30:	08003b61 	.word	0x08003b61
 8003a34:	08003b61 	.word	0x08003b61
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003b61 	.word	0x08003b61
 8003a40:	08003b61 	.word	0x08003b61
 8003a44:	08003b61 	.word	0x08003b61
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003b61 	.word	0x08003b61
 8003a50:	08003b61 	.word	0x08003b61
 8003a54:	08003b61 	.word	0x08003b61
 8003a58:	08003b1f 	.word	0x08003b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f960 	bl	8003d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e064      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f9b0 	bl	8003e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
      break;
 8003adc:	e043      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa05 	bl	8003ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
      break;
 8003b1c:	e023      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fa59 	bl	8003fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
      break;
 8003b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a43      	ldr	r2, [pc, #268]	@ (8003cfc <TIM_Base_SetConfig+0x120>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a40      	ldr	r2, [pc, #256]	@ (8003d00 <TIM_Base_SetConfig+0x124>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3f      	ldr	r2, [pc, #252]	@ (8003d04 <TIM_Base_SetConfig+0x128>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d08 <TIM_Base_SetConfig+0x12c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3d      	ldr	r2, [pc, #244]	@ (8003d0c <TIM_Base_SetConfig+0x130>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a32      	ldr	r2, [pc, #200]	@ (8003cfc <TIM_Base_SetConfig+0x120>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02b      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d027      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2f      	ldr	r2, [pc, #188]	@ (8003d00 <TIM_Base_SetConfig+0x124>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d023      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <TIM_Base_SetConfig+0x128>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01f      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <TIM_Base_SetConfig+0x12c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01b      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <TIM_Base_SetConfig+0x130>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d017      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <TIM_Base_SetConfig+0x134>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <TIM_Base_SetConfig+0x138>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00f      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a29      	ldr	r2, [pc, #164]	@ (8003d18 <TIM_Base_SetConfig+0x13c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00b      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a28      	ldr	r2, [pc, #160]	@ (8003d1c <TIM_Base_SetConfig+0x140>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a27      	ldr	r2, [pc, #156]	@ (8003d20 <TIM_Base_SetConfig+0x144>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a26      	ldr	r2, [pc, #152]	@ (8003d24 <TIM_Base_SetConfig+0x148>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d108      	bne.n	8003ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <TIM_Base_SetConfig+0x120>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0xf2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a10      	ldr	r2, [pc, #64]	@ (8003d0c <TIM_Base_SetConfig+0x130>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d103      	bne.n	8003cd6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	40001800 	.word	0x40001800
 8003d20:	40001c00 	.word	0x40001c00
 8003d24:	40002000 	.word	0x40002000

08003d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f023 0201 	bic.w	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0302 	bic.w	r3, r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a20      	ldr	r2, [pc, #128]	@ (8003e00 <TIM_OC1_SetConfig+0xd8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC1_SetConfig+0x64>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <TIM_OC1_SetConfig+0xdc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10c      	bne.n	8003da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0308 	bic.w	r3, r3, #8
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <TIM_OC1_SetConfig+0xd8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_OC1_SetConfig+0x8e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a14      	ldr	r2, [pc, #80]	@ (8003e04 <TIM_OC1_SetConfig+0xdc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d111      	bne.n	8003dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40010400 	.word	0x40010400

08003e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f023 0210 	bic.w	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0320 	bic.w	r3, r3, #32
 8003e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a22      	ldr	r2, [pc, #136]	@ (8003eec <TIM_OC2_SetConfig+0xe4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_OC2_SetConfig+0x68>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ef0 <TIM_OC2_SetConfig+0xe8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10d      	bne.n	8003e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a17      	ldr	r2, [pc, #92]	@ (8003eec <TIM_OC2_SetConfig+0xe4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_OC2_SetConfig+0x94>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <TIM_OC2_SetConfig+0xe8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d113      	bne.n	8003ec4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40010400 	.word	0x40010400

08003ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0303 	bic.w	r3, r3, #3
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <TIM_OC3_SetConfig+0xe0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_OC3_SetConfig+0x66>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a20      	ldr	r2, [pc, #128]	@ (8003fd8 <TIM_OC3_SetConfig+0xe4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10d      	bne.n	8003f76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a16      	ldr	r2, [pc, #88]	@ (8003fd4 <TIM_OC3_SetConfig+0xe0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_OC3_SetConfig+0x92>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a15      	ldr	r2, [pc, #84]	@ (8003fd8 <TIM_OC3_SetConfig+0xe4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d113      	bne.n	8003fae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	621a      	str	r2, [r3, #32]
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40010400 	.word	0x40010400

08003fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	031b      	lsls	r3, r3, #12
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a12      	ldr	r2, [pc, #72]	@ (8004080 <TIM_OC4_SetConfig+0xa4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_OC4_SetConfig+0x68>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a11      	ldr	r2, [pc, #68]	@ (8004084 <TIM_OC4_SetConfig+0xa8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d109      	bne.n	8004058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800404a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	40010400 	.word	0x40010400

08004088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2201      	movs	r2, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e05a      	b.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a21      	ldr	r2, [pc, #132]	@ (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004138:	d01d      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1a      	ldr	r2, [pc, #104]	@ (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10c      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40001800 	.word	0x40001800

080041cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e042      	b.n	800428c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fd faca 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	@ 0x24
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fdd3 	bl	8004de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800424c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800425c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800426c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	@ 0x28
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d175      	bne.n	80043a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_UART_Transmit+0x2c>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e06e      	b.n	80043a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2221      	movs	r2, #33	@ 0x21
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042d2:	f7fd fbbd 	bl	8001a50 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ec:	d108      	bne.n	8004300 <HAL_UART_Transmit+0x6c>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e003      	b.n	8004308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004308:	e02e      	b.n	8004368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2200      	movs	r2, #0
 8004312:	2180      	movs	r1, #128	@ 0x80
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fb37 	bl	8004988 <UART_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e03a      	b.n	80043a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	3302      	adds	r3, #2
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e007      	b.n	800435a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	3301      	adds	r3, #1
 8004358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1cb      	bne.n	800430a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2200      	movs	r2, #0
 800437a:	2140      	movs	r1, #64	@ 0x40
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb03 	bl	8004988 <UART_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e006      	b.n	80043a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d112      	bne.n	80043ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_UART_Receive_IT+0x26>
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00b      	b.n	80043ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	461a      	mov	r2, r3
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fb2a 	bl	8004a3a <UART_Start_Receive_IT>
 80043e6:	4603      	mov	r3, r0
 80043e8:	e000      	b.n	80043ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b0ba      	sub	sp, #232	@ 0xe8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_UART_IRQHandler+0x66>
 8004446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fc07 	bl	8004c66 <UART_Receive_IT>
      return;
 8004458:	e273      	b.n	8004942 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800445a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80de 	beq.w	8004620 <HAL_UART_IRQHandler+0x22c>
 8004464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80d1 	beq.w	8004620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_UART_IRQHandler+0xae>
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_UART_IRQHandler+0xd2>
 80044ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	f043 0202 	orr.w	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_UART_IRQHandler+0xf6>
 80044d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	f043 0204 	orr.w	r2, r3, #4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d011      	beq.n	800451a <HAL_UART_IRQHandler+0x126>
 80044f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	f043 0208 	orr.w	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 820a 	beq.w	8004938 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_UART_IRQHandler+0x14e>
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fb92 	bl	8004c66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_UART_IRQHandler+0x17a>
 8004566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d04f      	beq.n	800460e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa9d 	bl	8004aae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457e:	2b40      	cmp	r3, #64	@ 0x40
 8004580:	d141      	bne.n	8004606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800459c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1d9      	bne.n	8004582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d013      	beq.n	80045fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	4a8a      	ldr	r2, [pc, #552]	@ (8004804 <HAL_UART_IRQHandler+0x410>)
 80045dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe f91d 	bl	8002822 <HAL_DMA_Abort_IT>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045f8:	4610      	mov	r0, r2
 80045fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	e00e      	b.n	800461c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f9ac 	bl	800495c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	e00a      	b.n	800461c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9a8 	bl	800495c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	e006      	b.n	800461c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9a4 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800461a:	e18d      	b.n	8004938 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	bf00      	nop
    return;
 800461e:	e18b      	b.n	8004938 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	2b01      	cmp	r3, #1
 8004626:	f040 8167 	bne.w	80048f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8160 	beq.w	80048f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8159 	beq.w	80048f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004646:	2300      	movs	r3, #0
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b40      	cmp	r3, #64	@ 0x40
 8004668:	f040 80ce 	bne.w	8004808 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a9 	beq.w	80047d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800468a:	429a      	cmp	r2, r3
 800468c:	f080 80a2 	bcs.w	80047d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a2:	f000 8088 	beq.w	80047b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80046d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1d9      	bne.n	80046a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800471a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800471e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e1      	bne.n	80046f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800473e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800479a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800479e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd ffc6 	bl	8002742 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8cf 	bl	8004970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80047d2:	e0b3      	b.n	800493c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047dc:	429a      	cmp	r2, r3
 80047de:	f040 80ad 	bne.w	800493c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ec:	f040 80a6 	bne.w	800493c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8b7 	bl	8004970 <HAL_UARTEx_RxEventCallback>
      return;
 8004802:	e09b      	b.n	800493c <HAL_UART_IRQHandler+0x548>
 8004804:	08004b75 	.word	0x08004b75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004810:	b29b      	uxth	r3, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 808e 	beq.w	8004940 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8089 	beq.w	8004940 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004852:	647a      	str	r2, [r7, #68]	@ 0x44
 8004854:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e3      	bne.n	800482e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	623b      	str	r3, [r7, #32]
   return(result);
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800488a:	633a      	str	r2, [r7, #48]	@ 0x30
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e3      	bne.n	8004866 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048d0:	61fa      	str	r2, [r7, #28]
 80048d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	617b      	str	r3, [r7, #20]
   return(result);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e3      	bne.n	80048ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f83d 	bl	8004970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f6:	e023      	b.n	8004940 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_UART_IRQHandler+0x524>
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f940 	bl	8004b96 <UART_Transmit_IT>
    return;
 8004916:	e014      	b.n	8004942 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <HAL_UART_IRQHandler+0x54e>
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f980 	bl	8004c36 <UART_EndTransmit_IT>
    return;
 8004936:	e004      	b.n	8004942 <HAL_UART_IRQHandler+0x54e>
    return;
 8004938:	bf00      	nop
 800493a:	e002      	b.n	8004942 <HAL_UART_IRQHandler+0x54e>
      return;
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <HAL_UART_IRQHandler+0x54e>
      return;
 8004940:	bf00      	nop
  }
}
 8004942:	37e8      	adds	r7, #232	@ 0xe8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4613      	mov	r3, r2
 8004996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	e03b      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d037      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fd f855 	bl	8001a50 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e03a      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d023      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b80      	cmp	r3, #128	@ 0x80
 80049ce:	d020      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d01d      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d116      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f857 	bl	8004aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2208      	movs	r2, #8
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e00f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d0b4      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2222      	movs	r2, #34	@ 0x22
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0220 	orr.w	r2, r2, #32
 8004a9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b095      	sub	sp, #84	@ 0x54
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e5      	bne.n	8004ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d119      	bne.n	8004b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0310 	bic.w	r3, r3, #16
 8004b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b46:	61ba      	str	r2, [r7, #24]
 8004b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	613b      	str	r3, [r7, #16]
   return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b68:	bf00      	nop
 8004b6a:	3754      	adds	r7, #84	@ 0x54
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff fee7 	bl	800495c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b21      	cmp	r3, #33	@ 0x21
 8004ba8:	d13e      	bne.n	8004c28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb2:	d114      	bne.n	8004bde <UART_Transmit_IT+0x48>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d110      	bne.n	8004bde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	1c9a      	adds	r2, r3, #2
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	621a      	str	r2, [r3, #32]
 8004bdc:	e008      	b.n	8004bf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6211      	str	r1, [r2, #32]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10f      	bne.n	8004c24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fe76 	bl	8004948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b08c      	sub	sp, #48	@ 0x30
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b22      	cmp	r3, #34	@ 0x22
 8004c80:	f040 80aa 	bne.w	8004dd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8c:	d115      	bne.n	8004cba <UART_Receive_IT+0x54>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d111      	bne.n	8004cba <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cb8:	e024      	b.n	8004d04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc8:	d007      	beq.n	8004cda <UART_Receive_IT+0x74>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <UART_Receive_IT+0x82>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	e008      	b.n	8004cfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4619      	mov	r1, r3
 8004d12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d15d      	bne.n	8004dd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0220 	bic.w	r2, r2, #32
 8004d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d135      	bne.n	8004dca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 0310 	bic.w	r3, r3, #16
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	623a      	str	r2, [r7, #32]
 8004d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d10a      	bne.n	8004dbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fdd4 	bl	8004970 <HAL_UARTEx_RxEventCallback>
 8004dc8:	e002      	b.n	8004dd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fb fb74 	bl	80004b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e002      	b.n	8004dda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	@ 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b0c0      	sub	sp, #256	@ 0x100
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	ea40 0301 	orr.w	r3, r0, r1
 8004e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e3c:	f021 010c 	bic.w	r1, r1, #12
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	6999      	ldr	r1, [r3, #24]
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	ea40 0301 	orr.w	r3, r0, r1
 8004e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b8f      	ldr	r3, [pc, #572]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d005      	beq.n	8004e84 <UART_SetConfig+0xa0>
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80050b4 <UART_SetConfig+0x2d0>)
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d104      	bne.n	8004e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fe fb2a 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e8c:	e003      	b.n	8004e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8e:	f7fe fb11 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea0:	f040 810c 	bne.w	80050bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	eb12 0801 	adds.w	r8, r2, r1
 8004ecc:	4629      	mov	r1, r5
 8004ece:	eb43 0901 	adc.w	r9, r3, r1
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee6:	4690      	mov	r8, r2
 8004ee8:	4699      	mov	r9, r3
 8004eea:	4623      	mov	r3, r4
 8004eec:	eb18 0303 	adds.w	r3, r8, r3
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	eb49 0303 	adc.w	r3, r9, r3
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f12:	460b      	mov	r3, r1
 8004f14:	18db      	adds	r3, r3, r3
 8004f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f18:	4613      	mov	r3, r2
 8004f1a:	eb42 0303 	adc.w	r3, r2, r3
 8004f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f28:	f7fb f94e 	bl	80001c8 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b61      	ldr	r3, [pc, #388]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011c      	lsls	r4, r3, #4
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f54:	415b      	adcs	r3, r3
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f62:	4649      	mov	r1, r9
 8004f64:	eb43 0b01 	adc.w	fp, r3, r1
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f7c:	4692      	mov	sl, r2
 8004f7e:	469b      	mov	fp, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	eb1a 0303 	adds.w	r3, sl, r3
 8004f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	18db      	adds	r3, r3, r3
 8004fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fae:	4613      	mov	r3, r2
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fbe:	f7fb f903 	bl	80001c8 <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004fca:	fba3 2301 	umull	r2, r3, r3, r1
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	2264      	movs	r2, #100	@ 0x64
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	1acb      	subs	r3, r1, r3
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fec:	441c      	add	r4, r3
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005008:	415b      	adcs	r3, r3
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800500c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005010:	4641      	mov	r1, r8
 8005012:	1851      	adds	r1, r2, r1
 8005014:	6339      	str	r1, [r7, #48]	@ 0x30
 8005016:	4649      	mov	r1, r9
 8005018:	414b      	adcs	r3, r1
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005028:	4659      	mov	r1, fp
 800502a:	00cb      	lsls	r3, r1, #3
 800502c:	4651      	mov	r1, sl
 800502e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005032:	4651      	mov	r1, sl
 8005034:	00ca      	lsls	r2, r1, #3
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	4603      	mov	r3, r0
 800503c:	4642      	mov	r2, r8
 800503e:	189b      	adds	r3, r3, r2
 8005040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005044:	464b      	mov	r3, r9
 8005046:	460a      	mov	r2, r1
 8005048:	eb42 0303 	adc.w	r3, r2, r3
 800504c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800505c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005064:	460b      	mov	r3, r1
 8005066:	18db      	adds	r3, r3, r3
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506a:	4613      	mov	r3, r2
 800506c:	eb42 0303 	adc.w	r3, r2, r3
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800507a:	f7fb f8a5 	bl	80001c8 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8005084:	fba3 1302 	umull	r1, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	2164      	movs	r1, #100	@ 0x64
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	3332      	adds	r3, #50	@ 0x32
 8005096:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f003 0207 	and.w	r2, r3, #7
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4422      	add	r2, r4
 80050aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050ac:	e106      	b.n	80052bc <UART_SetConfig+0x4d8>
 80050ae:	bf00      	nop
 80050b0:	40011000 	.word	0x40011000
 80050b4:	40011400 	.word	0x40011400
 80050b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	1891      	adds	r1, r2, r2
 80050d4:	6239      	str	r1, [r7, #32]
 80050d6:	415b      	adcs	r3, r3
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050de:	4641      	mov	r1, r8
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb43 0501 	adc.w	r5, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	00eb      	lsls	r3, r5, #3
 80050f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	18e3      	adds	r3, r4, r3
 8005100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005104:	464b      	mov	r3, r9
 8005106:	eb45 0303 	adc.w	r3, r5, r3
 800510a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800511a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800512a:	4629      	mov	r1, r5
 800512c:	008b      	lsls	r3, r1, #2
 800512e:	4621      	mov	r1, r4
 8005130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005134:	4621      	mov	r1, r4
 8005136:	008a      	lsls	r2, r1, #2
 8005138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800513c:	f7fb f844 	bl	80001c8 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4b60      	ldr	r3, [pc, #384]	@ (80052c8 <UART_SetConfig+0x4e4>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011c      	lsls	r4, r3, #4
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800515c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	61b9      	str	r1, [r7, #24]
 8005168:	415b      	adcs	r3, r3
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6139      	str	r1, [r7, #16]
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051a4:	464b      	mov	r3, r9
 80051a6:	460a      	mov	r2, r1
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051c8:	4649      	mov	r1, r9
 80051ca:	008b      	lsls	r3, r1, #2
 80051cc:	4641      	mov	r1, r8
 80051ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d2:	4641      	mov	r1, r8
 80051d4:	008a      	lsls	r2, r1, #2
 80051d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051da:	f7fa fff5 	bl	80001c8 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <UART_SetConfig+0x4e4>)
 80051e6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2264      	movs	r2, #100	@ 0x64
 80051ee:	fb02 f303 	mul.w	r3, r2, r3
 80051f2:	1acb      	subs	r3, r1, r3
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	3332      	adds	r3, #50	@ 0x32
 80051f8:	4a33      	ldr	r2, [pc, #204]	@ (80052c8 <UART_SetConfig+0x4e4>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005204:	441c      	add	r4, r3
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	673b      	str	r3, [r7, #112]	@ 0x70
 800520e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	415b      	adcs	r3, r3
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005256:	464b      	mov	r3, r9
 8005258:	460a      	mov	r2, r1
 800525a:	eb42 0303 	adc.w	r3, r2, r3
 800525e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	663b      	str	r3, [r7, #96]	@ 0x60
 800526a:	667a      	str	r2, [r7, #100]	@ 0x64
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005278:	4649      	mov	r1, r9
 800527a:	008b      	lsls	r3, r1, #2
 800527c:	4641      	mov	r1, r8
 800527e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005282:	4641      	mov	r1, r8
 8005284:	008a      	lsls	r2, r1, #2
 8005286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800528a:	f7fa ff9d 	bl	80001c8 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <UART_SetConfig+0x4e4>)
 8005294:	fba3 1302 	umull	r1, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2164      	movs	r1, #100	@ 0x64
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	3332      	adds	r3, #50	@ 0x32
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <UART_SetConfig+0x4e4>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4422      	add	r2, r4
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052c2:	46bd      	mov	sp, r7
 80052c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c8:	51eb851f 	.word	0x51eb851f

080052cc <memset>:
 80052cc:	4402      	add	r2, r0
 80052ce:	4603      	mov	r3, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4d0d      	ldr	r5, [pc, #52]	@ (8005314 <__libc_init_array+0x38>)
 80052e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005318 <__libc_init_array+0x3c>)
 80052e2:	1b64      	subs	r4, r4, r5
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2600      	movs	r6, #0
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	4d0b      	ldr	r5, [pc, #44]	@ (800531c <__libc_init_array+0x40>)
 80052ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005320 <__libc_init_array+0x44>)
 80052f0:	f000 f818 	bl	8005324 <_init>
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	2600      	movs	r6, #0
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f855 3b04 	ldr.w	r3, [r5], #4
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f855 3b04 	ldr.w	r3, [r5], #4
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	0800535c 	.word	0x0800535c
 8005318:	0800535c 	.word	0x0800535c
 800531c:	0800535c 	.word	0x0800535c
 8005320:	08005360 	.word	0x08005360

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
